buildscript {
    ext {
        kotlinVersion = "1.3.41"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-code-analytics:latest.release"
        classpath "one.leftshift.asteria:asteria-dependency:latest.release"
        classpath "one.leftshift.asteria:asteria-docs:latest.release"
        classpath "one.leftshift.asteria:asteria-email:latest.release"
        classpath "one.leftshift.asteria:asteria-publish:latest.release"
        classpath "one.leftshift.asteria:asteria-report:latest.release"
        classpath "one.leftshift.asteria:asteria-version:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

apply plugin: "antlr"
apply plugin: "kotlin"
apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-report"

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}

asteriaReport {
    reportingUrl = System.getenv("ASTERIA_REPORT_URL")
    depsJsonResult = file("${rootProject.buildDir}/dependencyUpdates/report.json")
    junitXmlResults = fileTree(rootProject.projectDir) {
        include(
                "**/test-results/*/TEST-*.xml",
                "**/gaia-sdk-javascript/build/test/TEST-*.xml",
                "**/gaia-sdk-python/build/test/TEST-*.xml"
        )
    }
    junitBinaryResults = files(subprojects.collect { subproject ->
        ["test"].collect {
            "${subproject.buildDir}/test-results/${it}/binary"
        }
    }.flatten())
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2" // use ANTLR version 4
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.apache.velocity:velocity-engine-core:2.1"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
}

test {
    useJUnitPlatform()
}

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
generateGrammarSource {
    outputDirectory = new File(project.rootDir, "build/generated-src/antlr/gaia/sdk/antlr")
    arguments += ["-visitor", "-package", "gaia.sdk.antlr"]
}
compileKotlin.dependsOn generateGrammarSource

task generateSource(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "gaia.sdk.codegen.KotlinCodegenTest"
    }
}
generateSource.dependsOn generateGrammarSource


allprojects {
    repositories {
        jcenter()
    }

    apply plugin: "one.leftshift.asteria-dependency"
    apply plugin: "one.leftshift.asteria-version"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.13.RELEASE") {
                bomProperty("kotlin.version", kotlinVersion)
            }
        }
    }

    afterEvaluate { rootProject.tasks.postRelease.finalizedBy rootProject.tasks.sendReleaseEmail }
}

//todo: refactor release
task triggerRelease() {
    doLast {
        if (!project.hasProperty("scope")) {
            throw new RuntimeException("Scope not set. Set it with e.g. -Pscope=minor")
        }
        String scope = project.property("scope")
        def gitPullProc = new ProcessBuilder(["git", "pull", "--tags"])
                .directory(project.projectDir)
                .start()
        gitPullProc.waitForProcessOutput(System.out, System.err)
        if (gitPullProc.exitValue() != 0) {
            throw new RuntimeException("Unable to pull")
        }

        def gitTriggerTagProc = new ProcessBuilder(["git", "tag", "-a", "-m", "Trigger", "trigger-release-$scope" as String])
                .directory(project.projectDir)
                .start()
        gitTriggerTagProc.waitForProcessOutput(System.out, System.err)
        if (gitPullProc.exitValue() != 0) {
            throw new RuntimeException("Unable to create tag")
        }

        def gitPushProc = new ProcessBuilder(["git", "push", "--tags"])
                .directory(project.projectDir)
                .start()
        gitPushProc.waitForProcessOutput(System.out, System.err)
        if (gitPushProc.exitValue() != 0) {
            logger.quiet("Unable to push tag")
        }

        def gitDeleteTriggerTagProc = new ProcessBuilder(["git", "tag", "-d", "trigger-release-$scope" as String])
                .directory(project.projectDir)
                .start()
        gitDeleteTriggerTagProc.waitForProcessOutput(System.out, System.err)
    }
}
