import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    ext {
        kotlinVersion = "1.3.41"
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "com.netflix.nebula:nebula-release-plugin:8.0.3"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

apply plugin: "antlr"
apply plugin: "kotlin"

dependencies {
    antlr "org.antlr:antlr4:4.7.2" // use ANTLR version 4
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.apache.velocity:velocity-engine-core:2.1"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testImplementation "org.assertj:assertj-core:3.11.1"
}

repositories {
    jcenter()
    mavenCentral()
}

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
generateGrammarSource {
    outputDirectory = new File(project.rootDir, "build/generated-src/antlr/gaia/sdk/antlr")
    arguments += ["-visitor", "-package", "gaia.sdk.antlr"]
}
compileKotlin.dependsOn generateGrammarSource

test {
    useJUnitPlatform()
}

task generateSource(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "gaia.sdk.codegen.KotlinCodegenTest"
    }
}
generateSource.dependsOn generateGrammarSource

task triggerRelease() {
    doLast {
        if (!project.hasProperty("scope")) {
            throw new RuntimeException("Scope not set. Set it with e.g. -Pscope=minor")
        }
        String scope = project.property("scope")
        def gitPullProc = new ProcessBuilder(["git", "pull", "--tags"])
                .directory(project.projectDir)
                .start()
        gitPullProc.waitForProcessOutput(System.out, System.err)
        if (gitPullProc.exitValue() != 0) {
            throw new RuntimeException("Unable to pull")
        }

        def gitTriggerTagProc = new ProcessBuilder(["git", "tag", "-a", "-m", "Trigger", "trigger-release-$scope" as String])
                .directory(project.projectDir)
                .start()
        gitTriggerTagProc.waitForProcessOutput(System.out, System.err)
        if (gitPullProc.exitValue() != 0) {
            throw new RuntimeException("Unable to create tag")
        }

        def gitPushProc = new ProcessBuilder(["git", "push", "--tags"])
                .directory(project.projectDir)
                .start()
        gitPushProc.waitForProcessOutput(System.out, System.err)
        if (gitPushProc.exitValue() != 0) {
            logger.quiet("Unable to push tag")
        }

        def gitDeleteTriggerTagProc = new ProcessBuilder(["git", "tag", "-d", "trigger-release-$scope" as String])
                .directory(project.projectDir)
                .start()
        gitDeleteTriggerTagProc.waitForProcessOutput(System.out, System.err)
    }
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: "nebula.nebula-release"

    repositories {
        jcenter()
        mavenCentral()
    }

    release {
        defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
    }
}