import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    ext {
        kotlinVersion = "1.3.41"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-code-analytics:latest.release"
        classpath "one.leftshift.asteria:asteria-dependency:latest.release"
        classpath "one.leftshift.asteria:asteria-docs:latest.release"
        classpath "one.leftshift.asteria:asteria-email:latest.release"
        classpath "one.leftshift.asteria:asteria-publish:latest.release"
        classpath "one.leftshift.asteria:asteria-report:latest.release"
        classpath "one.leftshift.asteria:asteria-version:latest.release"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

apply plugin: "antlr"
apply plugin: "kotlin"
apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-report"

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}

asteriaReport {
    reportingUrl = System.getenv("ASTERIA_REPORT_URL")
    depsJsonResult = file("${rootProject.buildDir}/dependencyUpdates/report.json")
    junitXmlResults = fileTree(rootProject.projectDir) {
        include(
                "**/test-results/*/TEST-*.xml",
                "**/gaia-sdk-javascript/build/test/TEST-*.xml",
                "**/gaia-sdk-python/build/test/TEST-*.xml"
        )
    }
    junitBinaryResults = files(subprojects.collect { subproject ->
        ["test"].collect {
            "${subproject.buildDir}/test-results/${it}/binary"
        }
    }.flatten())
}

repositories {
    jcenter()
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.releasesRepositoryUrl
    }
    maven {
        credentials(AwsCredentials) {
            accessKey gradle.awsAccessKey
            secretKey gradle.awsSecretKey
        }
        url gradle.snapshotsRepositoryUrl
    }
}

configurations {
    mockServer
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2" // use ANTLR version 4

    mockServer "one.leftshift.heimdall:heimdall-mock:latest.integration:all"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.apache.velocity:velocity-engine-core:2.1"

    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core"
}

test {
    useJUnitPlatform()
}
task prepareMockServer(type: Copy) {
    from configurations.mockServer.filter { it.name.contains("heimdall-mock") }
    into "${rootProject.buildDir}/mock"
    rename(/.*/, "heimdall-mock.jar")
}

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
generateGrammarSource {
    outputDirectory = new File(project.rootDir, "build/generated-src/antlr/gaia/sdk/antlr")
    arguments += ["-visitor", "-package", "gaia.sdk.antlr"]
}
compileKotlin.dependsOn generateGrammarSource

task generateSource(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "gaia.sdk.codegen.KotlinCodegenTest"
    }
}
generateSource.dependsOn generateGrammarSource


allprojects {
    repositories {
        jcenter()
    }

    apply plugin: "one.leftshift.asteria-dependency"
    apply plugin: "one.leftshift.asteria-version"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.13.RELEASE") {
                bomProperty("kotlin.version", kotlinVersion)
            }
        }
    }

    afterEvaluate { rootProject.tasks.postRelease.finalizedBy rootProject.tasks.sendReleaseEmail }

    if (tasks.findByName("publish")) {
        afterEvaluate { rootProject.tasks.postRelease.dependsOn tasks.publish }
    }
}

subprojects {
    apply plugin: "one.leftshift.asteria-code-analytics"

    asteriaCodeAnalytics {
        sonarUrl = System.getenv("SONAR_HOST_URL")
        sonarLoginToken = System.getenv("SONAR_LOGIN")
        xmlCoverageReportEnabled = true
        sonarProperties = [
                "sonar.test.inclusions": "**/*Test.*,**/*.test.ts,**/tests/test_*.py",
                "sonar.javascript.lcov.reportPaths": "${project(":gaia-sdk-javascript").projectDir}/coverage/lcov.info",
                "sonar.typescript.lcov.reportPaths": "${project(":gaia-sdk-javascript").projectDir}/coverage/lcov.info",
                "sonar.python.coverage.reportPath" : "${project(":gaia-sdk-python").projectDir}/build/coverage/coverage.xml",
        ]
        coverageExcludes = ["**/*Kt.class"]
    }
}

task setVersionJavascript() {
    doLast {
        String packageJsonPath = project(":gaia-sdk-javascript").projectDir.toString() + "/package.json"
        File packageJsonFile = file(packageJsonPath)
        def parsedJson = new JsonSlurper().parseText(packageJsonFile.text)
        parsedJson.version = version.toString()
        packageJsonFile.text = new JsonBuilder(parsedJson).toPrettyString()
        logger.quiet("Updated version in ${packageJsonPath} to ${version.toString()}")
    }
}
task setVersionPython() {
    doLast {
        String pyprojectTomlPath = project(":gaia-sdk-python").projectDir.toString() + "/pyproject.toml"
        File pyprojectTomlFile = file(pyprojectTomlPath)
        String pyprojectTomlContent = pyprojectTomlFile.text

        Pattern regex = Pattern.compile("^version\\s?=\\s?[\"'].*[\"']\\s?\$", Pattern.MULTILINE)
        Matcher matcher = regex.matcher(pyprojectTomlContent)
        List<String> matches = []
        while (matcher.find()) {
            matches.add(matcher.group(0))
        }
        if (matches.size() > 1)
            throw new RuntimeException("More than one version found in ${pyprojectTomlPath}")
        if (matches.isEmpty() || matches.first().trim().isEmpty())
            throw new RuntimeException("No version found in ${pyprojectTomlPath}")
        pyprojectTomlFile.text = pyprojectTomlContent.replaceAll(matches.first(), "version = \"${version.toString()}\"")
        logger.quiet("Updated version in ${pyprojectTomlPath} to ${version.toString()}")
    }
}
task commitVersions() {
    doLast {
        // javascript
        String packageJsonPath = project(":gaia-sdk-javascript").projectDir + "/package.json"
        execute(["git", "add", packageJsonPath])
        // python
        String pyprojectTomlPath = project(":gaia-sdk-python").projectDir + "/pyproject.toml"
        execute(["git", "add", pyprojectTomlPath])

        String commitMessage = "set version to ${version.toString()}"
        execute(["git", "commit", "-m", commitMessage])
    }
}
commitVersions.dependsOn setVersionJavascript, setVersionPython

task pushVersions() {
    doLast {
        execute(["git", "push"])
    }
}
pushVersions.dependsOn commitVersions
afterEvaluate { rootProject.tasks.release.dependsOn rootProject.tasks.pushVersions }

private void execute(List<String> command) {
    logger.debug("Executing command '${command.join(" ")}'")
    def process = new ProcessBuilder(command).directory(projectDir).start()
    process.consumeProcessOutput(System.out, System.err)
    process.waitFor()
    if (process.exitValue() != 0) throw new RuntimeException("Command '${command.join(" ")}' failed with code ${process.exitValue()}")
    logger.debug("Executed command '${command.join(" ")}'")
}
