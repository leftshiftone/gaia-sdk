from api.VariableRegistry import VariableRegistry
from typing import Callable
import abc

"""
AUTOGENERATED CLASS. DO NOT MODIFY.
"""
class RainRequest(list):
    @staticmethod
    def query(config:Callable[['RainQueryRequest'], None]):
        request = RainQueryRequest()
        config(request)
        return request

    @staticmethod
    def mutation(config:Callable[['RainMutationRequest'], None]):
        request = RainMutationRequest()
        config(request)
        return request

    @abc.abstractmethod
    def getStatement(self):
        return

class RainQueryRequest(list):
    def __init__(self):
        super().__init__()
        self.preprocessors = []

    def insights(self, identityId:str, config:Callable[['QueryInsights'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryInsights(identityId)
            config(entity)
            return entity.render(registry)
        self.append(callback)

    def skills(self, config:Callable[['QuerySkills'], None]):
        def callback(registry:VariableRegistry):
            entity = QuerySkills()
            config(entity)
            return entity.render(registry)
        self.append(callback)

    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "query rain(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return (statement, registry.getVariables())

class QueryInsights(list):
    def __init__(self, identityId:str):
        super().__init__()
        self.identityId = identityId

    def classify(self, text:str, config:Callable[['QueryClassify'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryClassify(text)
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def gaiaQuery(self, statement:str):
        def callback(registry:VariableRegistry):
            name1 = registry.register("statement", statement)
            return "gaiaQuery(statement:$" + name1 + ")"
        self.append(callback)


    def render(self, registry:VariableRegistry):
        name1 = registry.register("identityId", self.identityId)
        return "insights(identityId:$" + name1 + ") { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryClassify(list):
    def __init__(self, text:str):
        super().__init__()
        self.text = text

    def qualifier(self):
        self.append(lambda x: "qualifier")

    def reference(self):
        self.append(lambda x: "reference")

    def score(self):
        self.append(lambda x: "score")


    def render(self, registry:VariableRegistry):
        name1 = registry.register("text", self.text)
        return "classify(text:$" + name1 + ") { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QuerySkills(list):
    def status(self, name:str):
        def callback(registry:VariableRegistry):
            name1 = registry.register("name", name)
            return "status(name:$" + name1 + ")"
        self.append(callback)


    def render(self, registry:VariableRegistry):
        return "skills { " + " ".join(map(lambda e: e(registry), self)) + " }"


class RainMutationRequest(RainRequest):
    def __init__(self):
        super().__init__()
        self.preprocessors = []
    def handleReception(self, impulse:ReceptionImpulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "handleReception(impulse:$" + name1 + ")"
        self.append(callback)

    def handleUtterance(self, impulse:UtteranceImpulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "handleUtterance(impulse:$" + name1 + ")"
        self.append(callback)

    def handleSuggestion(self, impulse:SuggestionImpulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "handleSuggestion(impulse:$" + name1 + ")"
        self.append(callback)

    def handleButton(self, impulse:ButtonImpulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "handleButton(impulse:$" + name1 + ")"
        self.append(callback)

    def handleSubmit(self, impulse:SubmitImpulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "handleSubmit(impulse:$" + name1 + ")"
        self.append(callback)


    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "mutation rain(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return [statement, registry.getVariables()]

class ReceptionImpulse {
    identityId?: str;
    clientId?: str;
    userId?: str;
    attributes?: dict;
}
class ButtonImpulse {
    identityId?: str;
    clientId?: str;
    userId?: str;
    attributes?: dict;
}
class SubmitImpulse {
    identityId?: str;
    clientId?: str;
    userId?: str;
    attributes?: dict;
}
class SuggestionImpulse {
    identityId?: str;
    clientId?: str;
    userId?: str;
    attributes?: dict;
}
class UtteranceImpulse {
    identityId?: str;
    clientId?: str;
    userId?: str;
    payload?: str;
}
