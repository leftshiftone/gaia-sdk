from api.VariableRegistry import VariableRegistry
from typing import Callable
import abc

"""
AUTOGENERATED CLASS. DO NOT MODIFY.
"""
class HeimdallRequest(list):

    @staticmethod
    def mutation(config:Callable[['HeimdallMutationRequest'], None]):
        request = HeimdallMutationRequest()
        config(request)
        return request

    @abc.abstractmethod
    def getStatement(self):
        return

class HeimdallQueryRequest(list):
    def __init__(self):
        super().__init__()
        self.preprocessors = []

    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "query heimdall(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return (statement, registry.getVariables())

class HeimdallMutationRequest(HeimdallRequest):
    def __init__(self):
        super().__init__()
        self.preprocessors = []
    def dispatchImpulse(self, impulse:Impulse):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "dispatchImpulse(impulse:$" + name1 + ")"
        self.append(callback)

    def dispatchImpulseContext(self, impulse:ImpulseContext):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "dispatchImpulseContext(impulse:$" + name1 + ")"
        self.append(callback)

    def dispatchImpulseNotification(self, impulse:ImpulseNotification):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "dispatchImpulseNotification(impulse:$" + name1 + ")"
        self.append(callback)

    def dispatchImpulseLog(self, impulse:ImpulseLog):
        def callback(registry:VariableRegistry):
            name1 = registry.register("impulse", impulse)
            return "dispatchImpulseLog(impulse:$" + name1 + ")"
        self.append(callback)


    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "mutation heimdall(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return [statement, registry.getVariables()]

class Impulse {
    impulsePayload?: Uint8Array;
    impulseHeader?: ImpulseHeader;
}
class ImpulseHeader {
    identityId?: str;
    clientId?: str;
    userId?: str;
}
class ImpulseContext {
    impulseContextPayload?: Uint8Array;
    impulseContextHeader?: ImpulseContextHeader;
}
class ImpulseContextHeader {
    identityId?: str;
    clientId?: str;
    userId?: str;
}
class ImpulseNotification {
    impulseNotificationPayload?: Uint8Array;
    impulseNotificationHeader?: ImpulseNotificationHeader;
}
class ImpulseNotificationHeader {
    identityId?: str;
    clientId?: str;
    userId?: str;
}
class ImpulseLog {
    impulseLogPayload?: Uint8Array;
    impulseLogHeader?: ImpulseLogHeader;
}
class ImpulseLogHeader {
    identityId?: str;
    clientId?: str;
    userId?: str;
}
