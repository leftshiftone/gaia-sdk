from api.VariableRegistry import VariableRegistry
from typing import Callable
import abc

"""
AUTOGENERATED CLASS. DO NOT MODIFY.
"""
class AtlasRequest(list):
    @staticmethod
    def query(config:Callable[['AtlasQueryRequest'], None]):
        request = AtlasQueryRequest()
        config(request)
        return request


    @abc.abstractmethod
    def getStatement(self):
        return

class AtlasQueryRequest(list):
    def __init__(self):
        super().__init__()
        self.preprocessors = []

    def nlu(self, text:str, merge:object, config:Callable[['QueryNlu'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryNlu(text, merge)
            config(entity)
            return entity.render(registry)
        self.append(callback)

    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "query atlas(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return (statement, registry.getVariables())

class QueryNlu(list):
    def __init__(self, text:str, merge:object):
        super().__init__()
        self.text = text
        self.merge = merge

    def txt(self):
        self.append(lambda x: "txt")

    def raw(self):
        self.append(lambda x: "raw")

    def cls(self, qualifier:str):
        def callback(registry:VariableRegistry):
            name1 = registry.register("qualifier", qualifier)
            return "cls(qualifier:$" + name1 + ")"
        self.append(callback)

    def lex(self, config:Callable[['QueryLex'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryLex()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def dep(self, config:Callable[['QueryDep'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryDep()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def ner(self, config:Callable[['QueryNer'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryNer()
            config(entity)
            return entity.render(registry)
        self.append(callback)

    def render(self, registry:VariableRegistry):
        name1 = registry.register("text", self.text)
        name2 = registry.register("merge", self.merge)
        return "nlu(text:$" + name1 + ", merge:$" + name2 + ") { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryLex(list):
    def lemma(self):
        self.append(lambda x: "lemma")

    def phonetic(self):
        self.append(lambda x: "phonetic")

    def pos(self):
        self.append(lambda x: "pos")

    def base(self):
        self.append(lambda x: "base")

    def flexions(self):
        self.append(lambda x: "flexions")

    def synonyms(self):
        self.append(lambda x: "synonyms")

    def collocations(self):
        self.append(lambda x: "collocations")

    def hyperonyms(self):
        self.append(lambda x: "hyperonyms")

    def meronyms(self):
        self.append(lambda x: "meronyms")

    def parts(self):
        self.append(lambda x: "parts")

    def abbreviations(self):
        self.append(lambda x: "abbreviations")

    def causations(self):
        self.append(lambda x: "causations")

    def labels(self):
        self.append(lambda x: "labels")


    def render(self, registry:VariableRegistry):
        return "lex { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryDep(list):
    def sourcePos(self):
        self.append(lambda x: "sourcePos")

    def targetPos(self):
        self.append(lambda x: "targetPos")

    def sourceTag(self):
        self.append(lambda x: "sourceTag")

    def targetTag(self):
        self.append(lambda x: "targetTag")

    def sourceIndex(self):
        self.append(lambda x: "sourceIndex")

    def targetIndex(self):
        self.append(lambda x: "targetIndex")

    def sourceBase(self):
        self.append(lambda x: "sourceBase")

    def targetBase(self):
        self.append(lambda x: "targetBase")

    def main(self):
        self.append(lambda x: "main")

    def modifier(self):
        self.append(lambda x: "modifier")

    def parenthesized(self):
        self.append(lambda x: "parenthesized")

    def source(self):
        self.append(lambda x: "source")

    def target(self):
        self.append(lambda x: "target")

    def relation(self):
        self.append(lambda x: "relation")

    def rawRelation(self):
        self.append(lambda x: "rawRelation")


    def render(self, registry:VariableRegistry):
        return "dep { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryNer(list):
    def datetime(self, config:Callable[['QueryDatetime'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryDatetime()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def duration(self, config:Callable[['QueryDuration'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryDuration()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def location(self, normalized:object, config:Callable[['QueryLocation'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryLocation(normalized)
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def organization(self, config:Callable[['QueryOrganization'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryOrganization()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def accommodation(self, config:Callable[['QueryAccommodation'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryAccommodation()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def person(self, config:Callable[['QueryPerson'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryPerson()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def price(self, config:Callable[['QueryPrice'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryPrice()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def age(self, config:Callable[['QueryAge'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryAge()
            config(entity)
            return entity.render(registry)
        self.append(callback)
    def bool(self):
        self.append(lambda x: "bool")

    def email(self):
        self.append(lambda x: "email")

    def url(self):
        self.append(lambda x: "url")

    def custom(self, qualifier:str, config:Callable[['QueryCustom'], None]):
        def callback(registry:VariableRegistry):
            entity = QueryCustom(qualifier)
            config(entity)
            return entity.render(registry)
        self.append(callback)

    def render(self, registry:VariableRegistry):
        return "ner { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryDatetime(list):
    def date(self):
        self.append(lambda x: "date")

    def date1(self):
        self.append(lambda x: "date1")

    def date2(self):
        self.append(lambda x: "date2")

    def negation(self):
        self.append(lambda x: "negation")

    def fuzzy(self):
        self.append(lambda x: "fuzzy")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "datetime { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryDuration(list):
    def amount(self):
        self.append(lambda x: "amount")

    def amountMin(self):
        self.append(lambda x: "amountMin")

    def amountMax(self):
        self.append(lambda x: "amountMax")

    def unit(self):
        self.append(lambda x: "unit")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "duration { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryLocation(list):
    def __init__(self, normalized:object):
        super().__init__()
        self.normalized = normalized

    def name(self):
        self.append(lambda x: "name")

    def type(self):
        self.append(lambda x: "type")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        name1 = registry.register("normalized", self.normalized)
        return "location(normalized:$" + name1 + ") { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryOrganization(list):
    def name(self):
        self.append(lambda x: "name")

    def type(self):
        self.append(lambda x: "type")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "organization { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryAccommodation(list):
    def name(self):
        self.append(lambda x: "name")

    def type(self):
        self.append(lambda x: "type")

    def amount(self):
        self.append(lambda x: "amount")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "accommodation { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryPerson(list):
    def name(self):
        self.append(lambda x: "name")

    def isAdult(self):
        self.append(lambda x: "isAdult")

    def age(self):
        self.append(lambda x: "age")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "person { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryPrice(list):
    def amount(self):
        self.append(lambda x: "amount")

    def amountMin(self):
        self.append(lambda x: "amountMin")

    def amountMax(self):
        self.append(lambda x: "amountMax")

    def currency(self):
        self.append(lambda x: "currency")

    def priceCategory(self):
        self.append(lambda x: "priceCategory")

    def sensibility(self):
        self.append(lambda x: "sensibility")

    def scope(self):
        self.append(lambda x: "scope")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "price { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryAge(list):
    def age(self):
        self.append(lambda x: "age")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        return "age { " + " ".join(map(lambda e: e(registry), self)) + " }"


class QueryCustom(list):
    def __init__(self, qualifier:str):
        super().__init__()
        self.qualifier = qualifier

    def data(self):
        self.append(lambda x: "data")

    def negation(self):
        self.append(lambda x: "negation")

    def indices(self):
        self.append(lambda x: "indices")


    def render(self, registry:VariableRegistry):
        name1 = registry.register("qualifier", self.qualifier)
        return "custom(qualifier:$" + name1 + ") { " + " ".join(map(lambda e: e(registry), self)) + " }"


class AtlasMutationRequest(AtlasRequest):
    def __init__(self):
        super().__init__()
        self.preprocessors = []

    def getStatement(self):
        registry = VariableRegistry()
        fields = " ".join(map(lambda e: e(registry), self))
        statement = "mutation atlas(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
        return [statement, registry.getVariables()]

