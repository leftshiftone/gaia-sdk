webhook-created: &webhook-created
  name: Webhook created
  command: |
    curl --insecure $WEBHOOK_BUILD_URL\?flow\=circleci-created -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
webhook-failed: &webhook-failed
  name: Webhook completed
  when: on_fail
  command: |
    curl --insecure $WEBHOOK_BUILD_URL\?flow\=circleci-completed\&status\=FAILED -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
prepare-image: &prepare-image
  name: Prepare image
  command: apt-get update && apt-get install -y openjdk-8-jdk && pip install --no-cache-dir "poetry==1.0.0" && curl --insecure -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" && tar -xJf "node-v$NODE_VERSION-linux-x64.tar.xz" -C /usr/local --strip-components=1 --no-same-owner && rm -f "node-v$NODE_VERSION-linux-x64.tar.xz" && ln -s /usr/local/bin/node /usr/local/bin/nodejs && npm install -g yarn
upload-dependency-report: &upload-dependency-report
  name: Upload json after trivy scan
  command: | 
    curl -u $DEPENDENCY_REPORT_TOKEN -H "Content-Type: application/json" -X POST -d $TRIVY_JSON https://trivy-collector.aios.dev/report

version: 2
jobs:
  webhook-completed:
    docker:
      - image: curlimages/curl:7.70.0
    steps:
      - run:
          name: Webhook completed
          command: |
            curl --insecure $WEBHOOK_BUILD_URL\?flow\=circleci-completed -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"${CIRCLE_BRANCH:-${CIRCLE_TAG/-/\/}}"'","build_number":"'"$CIRCLE_PREVIOUS_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
  build:
    docker:
      - image: python:3.7-stretch
    environment:
      GRADLE_OPTS: '-Xmx512m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
      NODE_OPTIONS: '--max_old_space_size=1024'
      NODE_VERSION: '10.20.1'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - run:
          <<: *prepare-image
      - checkout
      - run: echo $OSSRH_SIGN_KEY_CONTENT | base64 --decode > "$OSSRH_SIGN_KEY_PATH"
      - run: mkdir -p $TEST_RESULTS_PATH
      - run: chmod a+x gradlew
      - restore_cache:
          key: node-{{ checksum "gaia-sdk-javascript/yarn.lock" }}
      - restore_cache:
          key: pip-{{ checksum "gaia-sdk-python/poetry.lock" }}
      - run:
          name: Install dependencies for all projects
          command: ./gradlew dependencies installDependencies
      - run:
          name: Build all projects
          command: ./gradlew assemble --stacktrace
      - run:
          name: Publish Java snapshots
          command: ./gradlew :publish :gaia-sdk-java:publish -x publishReleasePublicationToSonatypeRepository -x publishMavenPomPublicationToSonatypeRepository --stacktrace
      - run:
          name: Test all projects
          command: ./gradlew test --stacktrace
      - run:
          name: Test JavaScript
          command: yarn --cwd="./gaia-sdk-javascript/" test
      - run:
          name: Collect test results java
          command: find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - run:
          name: Collect test results javascript
          command: find . -type f -regex ".*/gaia-sdk-javascript/build/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - run:
          name: Collect test results python
          command: find . -type f -regex ".*/gaia-sdk-python/build/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - save_cache:
          paths:
            - ./gaia-sdk-javascript/node_modules
          key: node-{{ checksum "gaia-sdk-javascript/yarn.lock" }}
      - save_cache:
          paths:
            - ~/.cache/pypoetry/virtualenvs
          key: pip-{{ checksum "gaia-sdk-python/poetry.lock" }}
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed

  release-candidate:
    docker:
      - image: python:3.7-stretch
    environment:
      GRADLE_OPTS: '-Xmx512m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
      NODE_OPTIONS: '--max_old_space_size=1024'
      NODE_VERSION: '10.20.1'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - run:
          <<: *prepare-image
      - add_ssh_keys:
          fingerprints:
            - "dc:17:c5:39:f0:6a:ac:48:bf:21:d4:82:7c:28:95:b2"
      - checkout
      - run: echo $OSSRH_SIGN_KEY_CONTENT | base64 --decode > "$OSSRH_SIGN_KEY_PATH"
      - run: git config --local user.email "ci@leftshift.one" && git config --local user.name "Continuous Integration"
      - run: chmod a+x gradlew
      - run: ./gradlew dependencies installDependencies
      - run: ./gradlew assemble --stacktrace
      - run: ./gradlew candidate publish -x test -x publishReleasePublicationToSonatypeRepository -x publishMavenPomPublicationToSonatypeRepository -Prelease.useLastTag=true --stacktrace
      - run:
          <<: *webhook-failed

  release:
    docker:
      - image: python:3.7-stretch
    environment:
      GRADLE_OPTS: '-Xmx512m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
      NODE_OPTIONS: '--max_old_space_size=1024'
      NODE_VERSION: '10.20.1'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - run:
          <<: *prepare-image
      - add_ssh_keys:
          fingerprints:
            - "dc:17:c5:39:f0:6a:ac:48:bf:21:d4:82:7c:28:95:b2"
      - checkout
      - run: echo $OSSRH_SIGN_KEY_CONTENT | base64 --decode > "$OSSRH_SIGN_KEY_PATH"
      - run: git config --local user.email "ci@leftshift.one" && git config --local user.name "Continuous Integration"
      - run: chmod a+x gradlew
      - run: ./gradlew dependencies installDependencies
      - run: ./gradlew test --stacktrace
      - run: ./gradlew assemble --stacktrace
      - run: ./gradlew final publish -Prelease.useLastTag=true --max-workers 1 closeAndReleaseRepository --stacktrace
      - run:
          <<: *webhook-failed

  code-analytics:
    docker:
      - image: python:3.7-stretch
    environment:
      GRADLE_OPTS: '-Xmx512m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
      NODE_OPTIONS: '--max_old_space_size=1024'
      NODE_VERSION: '10.20.1'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - run:
          <<: *prepare-image
      - checkout
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "gaia-sdk-java/build.gradle" }}
      - restore_cache:
          key: node-{{ checksum "gaia-sdk-javascript/yarn.lock" }}
      - restore_cache:
          key: pip-{{ checksum "gaia-sdk-python/poetry.lock" }}
      - run:
          name: Install dependencies for all projects
          command: ./gradlew dependencies installDependencies
      - run:
          name: Test all projects
          command: ./gradlew test --stacktrace
      - run:
          name: Collect test results java
          command: find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - run:
          name: Collect test results javascript
          command: find . -type f -regex ".*/gaia-sdk-javascript/build/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - run:
          name: Collect test results python
          command: find . -type f -regex ".*/gaia-sdk-python/build/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
          when: always
      - run: ./gradlew sonarqube
      - run: apt update && apt install trivy
      - run: trivy fs -s "HIGH,CRITICAL" -o json javascript.json gaia-sdk-javascript/yarn.lock
      - run: | 
          export TRIVY_JSON={'"project"': '"gaia-sdk-javascript"', '"report"': $(cat javascript.json)}
      - run:
          <<: *upload-dependency-report
      - run: trivy fs -s "HIGH,CRITICAL" -o json python.json gaia-sdk-python
      - run: | 
          export TRIVY_JSON={'"project"': '"gaia-sdk-python"', '"report"': $(cat python.json)}
      - run:
          <<: *upload-dependency-report
      - run: trivy rootfs -s "HIGH,CRITICAL" -o json java.json gaia-sdk-java
      - run |
          export TRIVY_JSON={'"project"': '"gaia-sdk-java"', '"report"': $(cat java.json)}
      - run:
          <<: *upload-dependency-report
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "gaia-sdk-java/build.gradle" }}
      - save_cache:
          paths:
            - ./gaia-sdk-javascript/node_modules
          key: node-{{ checksum "gaia-sdk-javascript/yarn.lock" }}
      - save_cache:
          paths:
            - ~/.cache/pypoetry/virtualenvs
          key: pip-{{ checksum "gaia-sdk-python/poetry.lock" }}
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed

workflows:
  version: 2
  build:
    jobs:
      - build:
          context:
            - asteria
            - maven-central
          filters:
            tags:
              ignore: /.*/
      - webhook-completed:
          context:
            - asteria
            - maven-central
          filters:
            tags:
              ignore: /.*/
          requires:
            - build
  weeklyBuild:
    triggers:
      - schedule:
          cron: "30 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context:
            - asteria
            - maven-central
      - webhook-completed:
          context:
            - asteria
            - maven-central
          requires:
            - build
  release-candidate:
    jobs:
      - release-candidate:
          context:
            - asteria
            - maven-central
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-rc\.\d+$/
      - webhook-completed:
          context:
            - asteria
            - maven-central
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+-rc\.\d+$/
          requires:
            - release-candidate
  release:
    jobs:
      - release:
          context:
            - asteria
            - maven-central
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/
      - webhook-completed:
          context:
            - asteria
            - maven-central
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/
          requires:
            - release
  code-analytics:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - code-analytics:
          context:
            - asteria
            - maven-central
      - webhook-completed:
          context:
            - asteria
            - maven-central
          requires:
            - code-analytics
