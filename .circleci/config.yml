webhook-created: &webhook-created
  name: Webhook created
  command: |
    curl $BUILD_STATUS_URL\?flow\=circleci-created -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
webhook-failed: &webhook-failed
  name: Webhook completed
  when: on_fail
  command: |
    curl $BUILD_STATUS_URL\?flow\=circleci-completed\&status\=FAILED -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true

version: 2
jobs:
  webhook-completed:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - run:
          name: Webhook completed
          command: |
            curl $BUILD_STATUS_URL\?flow\=circleci-completed -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"${CIRCLE_BRANCH:-${CIRCLE_TAG/-/\/}}"'","build_number":"'"$CIRCLE_PREVIOUS_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
  build-java:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      GRADLE_OPTS: '-Xmx128m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - checkout
      - run: chmod a+x gradlew
      - restore_cache:
          key: cache-gradle-{{ checksum "build.gradle" }}
      - run: ./gradlew dependencies
      - run: mkdir -p $TEST_RESULTS_PATH
      - run: ./gradlew test --stacktrace
      - run: find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
      - run: ./gradlew assemble --stacktrace
      - save_cache:
          paths:
            - ~/.gradle
          key: cache-gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed
  build-javascript:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - run:
          <<: *webhook-created
      - checkout
      - restore_cache:
          key: cache-node-{{ checksum "gaia-sdk-javascript/package.json" }}
      - run: cd ~/project/gaia-sdk-javascript && yarn install
      - save_cache:
          paths:
            - ./gaia-sdk-javascript/node_modules
          key: cache-node-{{ checksum "gaia-sdk-javascript/package.json" }}
      - run: cd ~/project/gaia-sdk-javascript && yarn test
      - run: cd ~/project/gaia-sdk-javascript && yarn build
      - run:
          <<: *webhook-failed
  release-java:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      GRADLE_OPTS: '-Xmx128m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx1024m"'
    steps:
      - run:
          <<: *webhook-created
      - add_ssh_keys:
          fingerprints:
            - "dc:17:c5:39:f0:6a:ac:48:bf:21:d4:82:7c:28:95:b2"
      - checkout
      - run: git config --local user.email "ci@leftshift.one" && git config --local user.name "Continuous Integration"
      - run: echo 'export SCOPE=${CIRCLE_TAG#trigger-release-}' >> $BASH_ENV && source $BASH_ENV
      - run: echo "Release scope is $SCOPE"
      - run: if [[ "$SCOPE" = "patch" ]]; then echo "No checkout necessary"; else git checkout master; fi;
      - run: chmod a+x gradlew
      - run: ./gradlew test --stacktrace
      - run: ./gradlew final publish -Prelease.scope=$SCOPE --stacktrace
      - run:
          name: Cleanup release
          when: on_fail
          command: git push -d origin $CIRCLE_TAG || true
      - run:
          <<: *webhook-failed
  release-javascript:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - run:
          <<: *webhook-created
      - add_ssh_keys:
          fingerprints:
            - "dc:17:c5:39:f0:6a:ac:48:bf:21:d4:82:7c:28:95:b2"
      - checkout
      - run: git config --local user.email "ci@leftshift.one" && git config --local user.name "Continuous Integration"
      - run: echo 'export SCOPE=${CIRCLE_TAG#trigger-release-}' >> $BASH_ENV && source $BASH_ENV
      - run: echo "Release scope is $SCOPE"
      - run: if [[ "$SCOPE" = "patch" ]]; then echo "No checkout necessary"; else git checkout master; fi;
      - run: cd ~/project/gaia-sdk-javascript && yarn install
      - run: cd ~/project/gaia-sdk-javascript && yarn test
      - run: cd ~/project/gaia-sdk-javascript && yarn build
      - run: cd ~/project/gaia-sdk-javascript && npm set registry https://registry.npmjs.org/
      - run: cd ~/project/gaia-sdk-javascript && echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
      - run: cd ~/project/gaia-sdk-javascript && npm run release:$SCOPE
      - run:
          name: Cleanup release
          when: always
          command: git push -d origin $CIRCLE_TAG || true
      - run:
          <<: *webhook-failed
  code-analytics:
    docker:
      - image: circleci/node:10-browsers
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - checkout
      - run: |
          curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip
          sonarqube=$(unzip -l sonar-scanner.zip | awk '{print $4}' | grep "^\([a-z0-9.-]*\/\)$")/bin/sonar-scanner
          ./$sonarqube -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.projectKey=one.leftshift.gaia-sdk -Dsonar.projectName=gaia-sdk
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed

workflows:
  version: 2
  build:
    jobs:
      - build-java:
          filters:
            tags:
              ignore: /.*/
      - build-javascript:
          filters:
            tags:
              ignore: /.*/
      - webhook-completed:
          filters:
            tags:
              ignore: /.*/
          requires:
            - build-java
            - build-javascript
  release:
    jobs:
      - release-java:
          context: bintray-jcenter
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^trigger-release-(major|minor|patch)$/
      - release-javascript:
          context: npm
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^trigger-release-(major|minor|patch)$/
          requires:
            - release-java
      - webhook-completed:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^trigger-release-(major|minor|patch)$/
          requires:
            - release-javascript
  code-analytics:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - code-analytics:
          context: leftshiftone-sonar
      - webhook-completed:
          requires:
            - code-analytics
