package gaia.sdk.rain

import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import java.util.Date

// AUTOGENERATED CLASS. DO NOT MODIFY.
abstract class RainResponse {

data class RainQueryResponse @JsonCreator constructor(
    @JsonProperty("data") val data: Data?,
    @JsonProperty("logs") val logs: Map<String, List<String>>?,
    @JsonProperty("nluScore") val nluScore: Double?,
    @JsonProperty("nerScore") val nerScore: Double?,
    @JsonProperty("score") val score: Double?,
    @JsonProperty("errors") val errors: List<String>?): RainResponse() {

    data class Data @JsonCreator constructor(@JsonProperty("insights") val insights: Insights?
, @JsonProperty("skills") val skills: Skills?
)    data class Insights @JsonCreator constructor(
        @JsonProperty("classify") val classify: Classify?, 
        @JsonProperty("gaiaQuery") val gaiaQuery: List<Map<String, Any>>?
    )

    data class Classify @JsonCreator constructor(
        @JsonProperty("qualifier") val qualifier: String?, 
        @JsonProperty("reference") val reference: String?, 
        @JsonProperty("score") val score: Float?
    )


    data class Skills @JsonCreator constructor(
        @JsonProperty("status") val status: Status?
    )

    data class Status @JsonCreator constructor(
        @JsonProperty("name") val name: String?, 
        @JsonProperty("status") val status: String?, 
        @JsonProperty("created") val created: String?
    )


    }

data class RainMutationResponse @JsonCreator constructor(
    @JsonProperty("data") val data: Data?,
    @JsonProperty("logs") val logs: Map<String, List<String>>?,
    @JsonProperty("errors") val errors: List<String>?): RainResponse() {

    data class Data @JsonCreator constructor(@JsonProperty("handleReception") val handleReception: Boolean?
, @JsonProperty("handleUtterance") val handleUtterance: Boolean?
, @JsonProperty("handleSuggestion") val handleSuggestion: Boolean?
, @JsonProperty("handleButton") val handleButton: Boolean?
, @JsonProperty("handleSubmit") val handleSubmit: Boolean?
, @JsonProperty("artifacts") val artifacts: Artifacts?
)    data class Artifacts @JsonCreator constructor(
        @JsonProperty("initiateUpload") val initiateUpload: InitiateUpload?, 
        @JsonProperty("transferChunk") val transferChunk: TransferChunk?, 
        @JsonProperty("completeUpload") val completeUpload: CompleteUpload?, 
        @JsonProperty("abortUpload") val abortUpload: Boolean?
    )

    data class InitiateUpload @JsonCreator constructor(
        @JsonProperty("transportId") val transportId: String?, 
        @JsonProperty("key") val key: String?
    )

    data class TransferChunk @JsonCreator constructor(
        @JsonProperty("transportId") val transportId: String?, 
        @JsonProperty("key") val key: String?, 
        @JsonProperty("partNumber") val partNumber: Int?, 
        @JsonProperty("etag") val etag: String?
    )

    data class CompleteUpload @JsonCreator constructor(
        @JsonProperty("location") val location: String?, 
        @JsonProperty("key") val key: String?, 
        @JsonProperty("etag") val etag: String?
    )


    }
}
