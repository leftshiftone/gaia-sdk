package gaia.sdk.rain

import gaia.sdk.VariableRegistry

// AUTOGENERATED CLASS. DO NOT MODIFY.
@Suppress("unused", "SpellCheckingInspection")
abstract class RainRequest : ArrayList<(VariableRegistry) -> String>() {

    companion object {
        @JvmStatic
        fun query(config: RainQueryRequest.() -> Unit): RainQueryRequest {
            return RainQueryRequest().apply(config)
        }
        @JvmStatic
        fun mutation(config: RainMutationRequest.() -> Unit): RainMutationRequest {
            return RainMutationRequest().apply(config)
        }
    }

    val preprocessors = ArrayList<String>()

    abstract fun getStatement():Pair<String, Map<String, Any>>
    class RainQueryRequest: RainRequest() {
        
        class Insights(private val identityId:Any) : ArrayList<(VariableRegistry) -> String>() {
            
            class Classify(private val text:Any) : ArrayList<(VariableRegistry) -> String>() {
                fun qualifier() = add { "qualifier" }
                fun reference() = add { "reference" }
                fun score() = add { "score" }

                fun render(registry:VariableRegistry, name:String = "classify"): String {
                    val name1 = registry.register("text", text)
                    return "$name(text:\$$name1) { ${joinToString(" ") { it(registry) }} }"
                }
            }

            fun classify(text:String, config: Classify.() -> Unit) = add {Classify(text).apply(config).render(it) }
            fun gaiaQuery(statement:String) = add { 
                val name1 = it.register("statement", statement)
                "gaiaQuery(statement:\$$name1)" 
            }

            fun render(registry:VariableRegistry, name:String = "insights"): String {
                val name1 = registry.register("identityId", identityId)
                return "$name(identityId:\$$name1) { ${joinToString(" ") { it(registry) }} }"
            }
        }

        fun insights(identityId:String, config: Insights.() -> Unit) = add {Insights(identityId).apply(config).render(it) }
        
        class Skills(private val tenantId:Any) : ArrayList<(VariableRegistry) -> String>() {
            
            class Status(private val skillName:Any) : ArrayList<(VariableRegistry) -> String>() {
                fun name() = add { "name" }
                fun status() = add { "status" }
                fun created() = add { "created" }

                fun render(registry:VariableRegistry, name:String = "status"): String {
                    val name1 = registry.register("skillName", skillName)
                    return "$name(skillName:\$$name1) { ${joinToString(" ") { it(registry) }} }"
                }
            }

            fun status(skillName:String, config: Status.() -> Unit) = add {Status(skillName).apply(config).render(it) }

            fun render(registry:VariableRegistry, name:String = "skills"): String {
                val name1 = registry.register("tenantId", tenantId)
                return "$name(tenantId:\$$name1) { ${joinToString(" ") { it(registry) }} }"
            }
        }

        fun skills(tenantId:String, config: Skills.() -> Unit) = add {Skills(tenantId).apply(config).render(it) }

        override fun getStatement():Pair<String, Map<String, Any>> {
            val registry = VariableRegistry()
            val fields = map { it(registry) }.joinToString(" ")
            val statement = "query rain(${registry.getDatatypes().joinToString(", ")}) { $fields }"
            return Pair(statement, registry.getVariables())
        }
    }

    class RainMutationRequest: RainRequest() {
        class ReceptionImpulse {
             lateinit var identityId:String
             lateinit var clientId:String
             lateinit var userId:String
             lateinit var attributes:Map<String, Any>
        }


        class ButtonImpulse {
             lateinit var identityId:String
             lateinit var clientId:String
             lateinit var userId:String
             lateinit var attributes:Map<String, Any>
        }


        class SubmitImpulse {
             lateinit var identityId:String
             lateinit var clientId:String
             lateinit var userId:String
             lateinit var attributes:Map<String, Any>
        }


        class SuggestionImpulse {
             lateinit var identityId:String
             lateinit var clientId:String
             lateinit var userId:String
             lateinit var attributes:Map<String, Any>
        }


        class UtteranceImpulse {
             lateinit var identityId:String
             lateinit var clientId:String
             lateinit var userId:String
             lateinit var payload:String
        }


        fun handleReception(impulse:ReceptionImpulse) = add { 
            val name1 = it.register("impulse", impulse)
            "handleReception(impulse:\$$name1)" 
        }
        fun handleUtterance(impulse:UtteranceImpulse) = add { 
            val name1 = it.register("impulse", impulse)
            "handleUtterance(impulse:\$$name1)" 
        }
        fun handleSuggestion(impulse:SuggestionImpulse) = add { 
            val name1 = it.register("impulse", impulse)
            "handleSuggestion(impulse:\$$name1)" 
        }
        fun handleButton(impulse:ButtonImpulse) = add { 
            val name1 = it.register("impulse", impulse)
            "handleButton(impulse:\$$name1)" 
        }
        fun handleSubmit(impulse:SubmitImpulse) = add { 
            val name1 = it.register("impulse", impulse)
            "handleSubmit(impulse:\$$name1)" 
        }
        class InitiateUploadImpulse {
             lateinit var fileName:String
        }


        class TransferChunkImpulse {
             lateinit var key:String
             lateinit var transportId:String
             var partNumber:Int = 0 
             var partSize:Long = 0 
             lateinit var encodedBytes:String
        }


        class CompleteUploadImpulse {
             lateinit var key:String
             lateinit var transportId:String
             lateinit var etags:List<Map<String, Any>>
        }


        class AbortUploadImpulse {
             lateinit var key:String
             lateinit var transportId:String
        }


        class HazeArtifact {
             lateinit var qualifier:String
             lateinit var appendent:String
             lateinit var labelList:List<String>
             lateinit var type:String
        }


        
        class Artifacts(private val tenantId:Any) : ArrayList<(VariableRegistry) -> String>() {
            
            class InitiateUpload(private val impulse:Any) : ArrayList<(VariableRegistry) -> String>() {
                fun transportId() = add { "transportId" }
                fun key() = add { "key" }

                fun render(registry:VariableRegistry, name:String = "initiateUpload"): String {
                    val name1 = registry.register("impulse", impulse)
                    return "$name(impulse:\$$name1) { ${joinToString(" ") { it(registry) }} }"
                }
            }

            fun initiateUpload(impulse:InitiateUploadImpulse, config: InitiateUpload.() -> Unit) = add {InitiateUpload(impulse).apply(config).render(it) }
            
            class TransferChunk(private val impulse:Any) : ArrayList<(VariableRegistry) -> String>() {
                fun transportId() = add { "transportId" }
                fun key() = add { "key" }
                fun partNumber() = add { "partNumber" }
                fun etag() = add { "etag" }

                fun render(registry:VariableRegistry, name:String = "transferChunk"): String {
                    val name1 = registry.register("impulse", impulse)
                    return "$name(impulse:\$$name1) { ${joinToString(" ") { it(registry) }} }"
                }
            }

            fun transferChunk(impulse:TransferChunkImpulse, config: TransferChunk.() -> Unit) = add {TransferChunk(impulse).apply(config).render(it) }
            
            class CompleteUpload(private val impulse:Any, private val artifact:Any) : ArrayList<(VariableRegistry) -> String>() {
                fun location() = add { "location" }
                fun key() = add { "key" }
                fun etag() = add { "etag" }

                fun render(registry:VariableRegistry, name:String = "completeUpload"): String {
                    val name1 = registry.register("impulse", impulse)
                    val name2 = registry.register("artifact", artifact)
                    return "$name(impulse:\$$name1, artifact:\$$name2) { ${joinToString(" ") { it(registry) }} }"
                }
            }

            fun completeUpload(impulse:CompleteUploadImpulse, artifact:HazeArtifact, config: CompleteUpload.() -> Unit) = add {CompleteUpload(impulse, artifact).apply(config).render(it) }
            fun abortUpload(impulse:AbortUploadImpulse) = add { 
                val name1 = it.register("impulse", impulse)
                "abortUpload(impulse:\$$name1)" 
            }

            fun render(registry:VariableRegistry, name:String = "artifacts"): String {
                val name1 = registry.register("tenantId", tenantId)
                return "$name(tenantId:\$$name1) { ${joinToString(" ") { it(registry) }} }"
            }
        }

        fun artifacts(tenantId:String, config: Artifacts.() -> Unit) = add {Artifacts(tenantId).apply(config).render(it) }


        override fun getStatement():Pair<String, Map<String, Any>> {
            val registry = VariableRegistry()
            val fields = map { it(registry) }.joinToString(" ")
            val statement = "mutation rain(${registry.getDatatypes().joinToString(", ")}) { $fields }"
            return Pair(statement, registry.getVariables())
        }
    }

}
