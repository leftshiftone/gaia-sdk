package gaia.sdk.atlas

import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import java.util.Date

// AUTOGENERATED CLASS. DO NOT MODIFY.
abstract class AtlasResponse {

data class AtlasQueryResponse @JsonCreator constructor(
    @JsonProperty("data") val data: Data?,
    @JsonProperty("logs") val logs: Map<String, List<String>>?,
    @JsonProperty("nluScore") val nluScore: Double?,
    @JsonProperty("nerScore") val nerScore: Double?,
    @JsonProperty("score") val score: Double?,
    @JsonProperty("errors") val errors: List<String>?): AtlasResponse() {

    data class Data @JsonCreator constructor(        @JsonProperty("nlu") val nlu: Nlu?
)

    data class Nlu @JsonCreator constructor(
        @JsonProperty("txt") val txt: String?, 
        @JsonProperty("raw") val raw: String?, 
        @JsonProperty("cls") val cls: String?, 
        @JsonProperty("lex") val lex: List<Lex>?, 
        @JsonProperty("dep") val dep: List<Dep>?, 
        @JsonProperty("ner") val ner: List<Ner>?
    )

    data class Lex @JsonCreator constructor(
        @JsonProperty("lemma") val lemma: String?, 
        @JsonProperty("pos") val pos: String?, 
        @JsonProperty("base") val base: String?, 
        @JsonProperty("flexions") val flexions: List<Lex>?, 
        @JsonProperty("synonyms") val synonyms: List<Lex>?, 
        @JsonProperty("collocations") val collocations: List<Lex>?, 
        @JsonProperty("hyperonyms") val hyperonyms: List<Lex>?, 
        @JsonProperty("meronyms") val meronyms: List<Lex>?, 
        @JsonProperty("parts") val parts: List<Lex>?, 
        @JsonProperty("abbreviations") val abbreviations: List<Lex>?, 
        @JsonProperty("causations") val causations: List<Lex>?, 
        @JsonProperty("labels") val labels: List<String>?
    )

    data class Dep @JsonCreator constructor(
        @JsonProperty("sourcePos") val sourcePos: String?, 
        @JsonProperty("targetPos") val targetPos: String?, 
        @JsonProperty("sourceTag") val sourceTag: String?, 
        @JsonProperty("targetTag") val targetTag: String?, 
        @JsonProperty("sourceIndex") val sourceIndex: Int?, 
        @JsonProperty("targetIndex") val targetIndex: Int?, 
        @JsonProperty("sourceBase") val sourceBase: String?, 
        @JsonProperty("targetBase") val targetBase: String?, 
        @JsonProperty("main") val main: Boolean?, 
        @JsonProperty("modifier") val modifier: Boolean?, 
        @JsonProperty("parenthesized") val parenthesized: Boolean?, 
        @JsonProperty("source") val source: String?, 
        @JsonProperty("target") val target: String?, 
        @JsonProperty("relation") val relation: String?, 
        @JsonProperty("rawRelation") val rawRelation: String?
    )

    data class Ner @JsonCreator constructor(
        @JsonProperty("datetime") val datetime: List<Datetime>?, 
        @JsonProperty("duration") val duration: List<Duration>?, 
        @JsonProperty("location") val location: List<Location>?, 
        @JsonProperty("organization") val organization: List<Organization>?, 
        @JsonProperty("accommodation") val accommodation: List<Accommodation>?, 
        @JsonProperty("person") val person: List<Person>?, 
        @JsonProperty("price") val price: List<Price>?, 
        @JsonProperty("age") val age: List<Age>?, 
        @JsonProperty("bool") val bool: Boolean?, 
        @JsonProperty("email") val email: String?, 
        @JsonProperty("url") val url: String?, 
        @JsonProperty("custom") val custom: List<Custom>?
    )

    data class Datetime @JsonCreator constructor(
        @JsonProperty("date") val date: Date?, 
        @JsonProperty("date1") val date1: Date?, 
        @JsonProperty("date2") val date2: Date?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("fuzzy") val fuzzy: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Duration @JsonCreator constructor(
        @JsonProperty("amount") val amount: Int?, 
        @JsonProperty("amountMin") val amountMin: Int?, 
        @JsonProperty("amountMax") val amountMax: Int?, 
        @JsonProperty("unit") val unit: String?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Location @JsonCreator constructor(
        @JsonProperty("name") val name: String?, 
        @JsonProperty("type") val type: String?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Organization @JsonCreator constructor(
        @JsonProperty("name") val name: String?, 
        @JsonProperty("type") val type: String?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Accommodation @JsonCreator constructor(
        @JsonProperty("name") val name: String?, 
        @JsonProperty("type") val type: String?, 
        @JsonProperty("amount") val amount: Int?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Person @JsonCreator constructor(
        @JsonProperty("name") val name: String?, 
        @JsonProperty("isAdult") val isAdult: Boolean?, 
        @JsonProperty("age") val age: Int?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Price @JsonCreator constructor(
        @JsonProperty("amount") val amount: Float?, 
        @JsonProperty("amountMin") val amountMin: Float?, 
        @JsonProperty("amountMax") val amountMax: Float?, 
        @JsonProperty("currency") val currency: String?, 
        @JsonProperty("priceCategory") val priceCategory: String?, 
        @JsonProperty("sensibility") val sensibility: String?, 
        @JsonProperty("scope") val scope: String?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Age @JsonCreator constructor(
        @JsonProperty("age") val age: Int?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )

    data class Custom @JsonCreator constructor(
        @JsonProperty("data") val data: Map<String, Any>?, 
        @JsonProperty("negation") val negation: Boolean?, 
        @JsonProperty("indices") val indices: List<Int>?
    )


    }

}
