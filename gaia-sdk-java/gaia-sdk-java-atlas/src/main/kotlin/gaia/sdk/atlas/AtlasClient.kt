package gaia.sdk.atlas

import com.fasterxml.jackson.databind.ObjectMapper
import gaia.sdk.api.ClientOptions
import gaia.sdk.api.ITransporter
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import java.security.SecureRandom
import java.util.*
import java.util.concurrent.atomic.AtomicLong
import kotlin.reflect.KClass

// AUTOGENERATED CLASS. DO NOT MODIFY.
class AtlasClient(private val options: ClientOptions, private val transporter: ITransporter) {

    companion object {
        private val log = LoggerFactory.getLogger(this::class.java.enclosingClass)
    }

    private val json = ObjectMapper()
    private val nonce = AtomicLong(SecureRandom().nextLong())

    fun <T:AtlasResponse>executeNative(statement: String, variables:Map<String, Any>, preprocessors: List<String>, type:KClass<T>): Publisher<T> {
        val body = HashMap<String, Any>()
        body.put("statement", statement)
        body.put("variables", variables)
        body.put("timestamp", System.currentTimeMillis())
        body.put("nonce", java.lang.Long.toString(nonce.getAndIncrement()))
        body.put("preprocessors", preprocessors)

        if (log.isDebugEnabled) {
            log.debug("Statement: $statement")
            log.debug("Variables: $variables")
        }
        val payload = json.writeValueAsBytes(body)
        if (log.isTraceEnabled) {
            log.trace("Payload: ${String(payload)}")
        }
        return transporter.transport(options, type.java, payload);
    }

    fun query(request: AtlasRequest.AtlasQueryRequest): Publisher<AtlasResponse.AtlasQueryResponse> {
        val (statement, variables) = request.getStatement()
        return executeNative(statement, variables, request.preprocessors, AtlasResponse.AtlasQueryResponse::class)
    }

}
