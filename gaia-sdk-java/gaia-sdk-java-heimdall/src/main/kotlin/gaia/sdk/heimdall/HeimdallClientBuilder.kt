package gaia.sdk.heimdall

import gaia.sdk.api.ClientOptions
import gaia.sdk.api.ITransporter
import gaia.sdk.support.HMAC
import gaia.sdk.transport.HttpTransport
import reactor.netty.http.client.HttpClient

// AUTOGENERATED CLASS. DO NOT MODIFY.
class HeimdallClientBuilder private constructor(private val transporter: ITransporter) {

    lateinit var apiKey: String;
    lateinit var secret: String;

    companion object {
        @JvmStatic
        @JvmOverloads
        fun http(url: String, client: HttpClient = HttpClient.create()): HeimdallClientBuilder {
            return HeimdallClientBuilder(HttpTransport(url, client))
        }
        @JvmStatic
        fun custom(transporter: ITransporter): HeimdallClientBuilder {
            return HeimdallClientBuilder(transporter)
        }
    }

    fun withApiKey(key: String): HeimdallClientBuilder {
        this.apiKey = key
        return this
    }

    fun withSecret(secret: String): HeimdallClientBuilder {
        this.secret = secret
        return this
    }

    fun build(): HeimdallClient {
        val options = ClientOptions(apiKey, HMAC(secret))
        return HeimdallClient(options, transporter)
    }

}
