#parse("/template/javascript/ClientMacros.vm")
import {ClientOptions} from '../api/ClientOptions';
import {ITransporter} from '../api/ITransporter';
#if($hasQuery)
import {#capitalize($name)QueryRequest} from './#capitalize($name)Request';
import {#capitalize($name)QueryResponse} from './#capitalize($name)Response';
#end
#if($hasMutation)
import {#capitalize($name)MutationRequest} from './#capitalize($name)Request';
import {#capitalize($name)MutationResponse} from './#capitalize($name)Response';
#end

// AUTOGENERATED CLASS. DO NOT MODIFY.
export class #capitalize($name)Client {
#tab(4)private options: ClientOptions;
#tab(4)private transporter: ITransporter;
#tab(4)private nonce = Math.random();

#tab(4)constructor(options: ClientOptions, transporter: ITransporter) {
#tab(8)this.options = options;
#tab(8)this.transporter = transporter;
#tab(4)}

#if($hasQuery)#*
    *##tab(4)public queryNative(statement: string, variables: #print("Record<string, any>") = {}, #*
*#preprocessors: Array#print("<string>") = []): Promise#print("<")#capitalize($name)QueryResponse#print(">") {#*
    *##tab(8)this.nonce += 1;#*
    *##tab(8)const body = {#*
    *##tab(12)statement,#*
    *##tab(12)variables,#*
    *##tab(12)preprocessors,#*
    *##tab(12)timestamp: new Date().getTime(),#*
    *##tab(12)nonce: this.nonce,#*
    *##tab(8)};#*
    *##tab(8)return this.transporter.transport(this.options, body);#*
    *##tab(4)}#*
    *#$newLine#tab(4)public query(request: #capitalize($name)QueryRequest): #*
    *#Promise#print("<")#capitalize($name)QueryResponse#print(">") {$newLine#*
    *##tab(8)const [statement, variables] = request.getStatement();$newLine#*
    *##tab(8)return this.queryNative(statement, variables, request.preprocessors);$newLine#*
    *##tab(4)}$newLine##
#end
#if($hasMutation)#*
    *##tab(4)public mutationNative(statement: string, variables: #print("Record<string, any>") = {}, #*
*#preprocessors: Array#print("<string>") = []): Promise#print("<")#capitalize($name)MutationResponse#print(">") {#*
    *##tab(8)this.nonce += 1;#*
    *##tab(8)const body = {#*
    *##tab(12)statement,#*
    *##tab(12)variables,#*
    *##tab(12)preprocessors,#*
    *##tab(12)timestamp: new Date().getTime(),#*
    *##tab(12)nonce: this.nonce,#*
    *##tab(8)};#*
    *##tab(8)return this.transporter.transport(this.options, body);#*
    *##tab(4)}#*
    *#$newLine#tab(4)public mutation(request: #capitalize($name)MutationRequest): Promise#print("<")#*
    *##capitalize($name)MutationResponse#print(">") {$newLine#*
    *##tab(8)const [statement, variables] = request.getStatement();$newLine#*
    *##tab(8)return this.mutationNative(statement, variables, request.preprocessors);$newLine#*
    *##tab(4)}$newLine##
#end

}
