import {ClientOptions} from '../api/ClientOptions';
import {ITransporter} from '../api/ITransporter';
import {Query} from "./request/type/Query";
import {Mutation} from "./request/type/Mutation";
import {Subscription} from "./request/type/Subscription";
import {QueryResponse} from './#capitalize($name)Response';
import {MutationResponse} from './#capitalize($name)Response';
import {SubscriptionResponse} from './#capitalize($name)Response';
import VariableRegistry from "../api/VariableRegistry";

export class #capitalize($name)Client {
#tab(4)private readonly options: ClientOptions;
#tab(4)private readonly transporter: ITransporter;

#tab(4)constructor(options: ClientOptions, transporter: ITransporter) {
#tab(8)this.options = options;
#tab(8)this.transporter = transporter;
#tab(4)}

#tab(4)public queryNative(statement: string, variables: #print("Record<string, any>") = {}):#*
*#Promise#print("<")QueryResponse#print(">") {$newLine#*
*##tab(8)const body = {statement, variables};$newLine#*
*##tab(8)return this.transporter.transport(this.options, body);$newLine#*
*##tab(4)}$newLine#*
*#$newLine#tab(4)public query(request: Query): #*
*#Promise#print("<")QueryResponse#print(">") {$newLine#*
*##tab(8)const [statement, variables] = this.getStatement("query", request);$newLine#*
*##tab(8)return this.queryNative(statement, variables);$newLine#*
*##tab(4)}$newLine$newLine#*
*##tab(4)public mutationNative(statement: string, variables: #print("Record<string, any>") = {}): #*
*#Promise#print("<")MutationResponse#print(">") {$newLine#*
*##tab(8)const body = {statement, variables};$newLine#*
*##tab(8)return this.transporter.transport(this.options, body);$newLine#*
*##tab(4)}$newLine#*
*#$newLine#tab(4)public mutation(request: Mutation): Promise#print("<")#*
*#MutationResponse#print(">") {$newLine#*
*##tab(8)const [statement, variables] = this.getStatement("mutation", request);$newLine#*
*##tab(8)return this.mutationNative(statement, variables);$newLine#*
*##tab(4)}$newLine$newLine##
#tab(4)public subscriptionNative(statement: string, variables: #print("Record<string, any>") = {}):#*
*#Promise#print("<")SubscriptionResponse#print(">") {$newLine#*
*##tab(8)const body = {statement, variables};$newLine#*
*##tab(8)return this.transporter.transport(this.options, body);$newLine#*
*##tab(4)}$newLine#*
*#$newLine#tab(4)public subscription(request: Subscription): #*
*#Promise#print("<")SubscriptionResponse#print(">") {$newLine#*
*##tab(8)const [statement, variables] = this.getStatement("subscription", request);$newLine#*
*##tab(8)return this.subscriptionNative(statement, variables);$newLine#*
*##tab(4)}$newLine$newLine##

#tab(4)private getStatement(name: string, type: Array<(_:VariableRegistry) => string>):[string, {}] {
#tab(8)const registry = new VariableRegistry();
#tab(8)const fields = type.map(e => e(registry)).join(" ");

#tab(8)if (registry.getDatatypes().length == 0) {
#tab(12)const statement = `#print("$"){name} gaia { ${fields} }`;
#tab(12)return [statement, registry.getVariables()];
#tab(8)}
#tab(8)const statement = `#print("$"){name} gaia(${registry.getDatatypes().join(", ")}) { #print("${")fields#print("}") }`;
#tab(8)return [statement, registry.getVariables()];
#tab(4)}

}

export type Struct = Record<string, any>
export type Long = String
export type Timestamp = String
export type Uuid = String
#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
