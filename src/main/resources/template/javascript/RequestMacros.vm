#macro(toKotlinType $type)
    #if ($type.class.simpleName.equals("StringType"))string##
    #elseif ($type.class.simpleName.equals("IntType"))number##
    #elseif ($type.class.simpleName.equals("FloatType"))number##
    #elseif ($type.class.simpleName.equals("LongType"))number##
    #elseif ($type.class.simpleName.equals("BooleanType"))boolean##
    #elseif ($type.class.simpleName.equals("MapType"))Map#print("<")String, any#print(">")##
    #elseif ($type.class.simpleName.equals("ListType"))#toKotlinType($type.type)#print("[]")##
    #elseif ($type.class.simpleName.equals("DateType"))Date##
    #elseif ($type.class.simpleName.equals("ArrayType") && $type.type.class.simpleName.equals("ByteType"))Uint8Array##
    #else #capitalize($type.name)##
    #end
#end
#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
#macro(renderEntity $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity") && !$isIncomingType.apply($renderable))#*
        *#export class $prefix#capitalize($renderable.name) extends #print("Array<(_:VariableRegistry) => string>") {$newLine#*
        *##renderConstructor($renderable)#*
        *##renderFields($renderable, $prefix)#*
        *#$newLine#tab(4)public render = (registry:VariableRegistry): string #print("=>") {$newLine#*
            *##foreach($argument in $renderable.arguments)#*
                *##tab(8)const name$foreach.count = registry.register("$argument.name", this.$argument.name);$newLine#*
            *##end#*
            *##tab(8)return "${renderable.name}#if(!$renderable.arguments.isEmpty())(#end#*
            *##foreach($argument in $renderable.arguments)#*
                *##if ($foreach.count > 1), #end#*
                *#$argument.name:$" + name$foreach.count + "#*
            *##end#*
            *##if(!$renderable.arguments.isEmpty()))#end { " + this.map((e) => e(registry)).join(" ") + " }";$newLine#*
            *##tab(4)}$newLine#*
        *#}$newLine$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##renderEntity($field $prefix)#*
        *##end#*
    *##end##
#end
##
## Renders all entity fields
## *************************
#macro(renderFields $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity"))#*
        *##foreach($field in $renderable.fields)#*
            *##renderField($field, $prefix)#*
        *##end#*
    *##end##
#end##
#macro(renderField $field $prefix)#*
    *##if($field.type.class.simpleName.equals("RefType"))#*
        *##renderRefType($field, $prefix)#*
    *##elseif ($isIncomingType.apply($field))#*
        *##if ($field.class.simpleName.equals("Field"))#*
            *##renderArgumentField($field, $prefix)#*
        *##end#*
    *##elseif ($field.class.simpleName.equals("Entity"))#*
        *##renderEntityField($field $prefix)#*
    *##elseif ($field.arguments.isEmpty())#*
        *##renderNoArgumentField($field)#*
    *##else#*
        *##renderArgumentField($field, $prefix)#*
    *##end##
#end##
#macro(renderNoArgumentField $field)#*
    *##tab(4)public $field.name = () => this.push(() => "$field.name");$newLine##
#end
#macro(renderRefType $field $prefix)#*
    *##tab(4)public ${field.name} = (config:(_:$prefix#capitalize($field.type.name)) => void) => this.push((registry) => {$newLine#*
    *##tab(8)const entity = new $prefix#capitalize($field.type.name)();$newLine#*
    *##tab(8)config(entity);$newLine#*
    *##tab(8)return entity.render(registry);$newLine#*
    *##tab(4)});$newLine##
#end
#macro(renderEntityField $field $prefix)#*
    *##tab(4)public $field.name = (#renderArguments($field, $prefix)) => this.push((registry) => {$newLine#*

    *##if($isIncomingType.apply($field))#*
        *##foreach($argument in $field.arguments)#*
            *##tab(8)const name$foreach.count = registry.register("$argument.name", $argument.name);$newLine#*
        *##end#*
        *##tab(8)return "$field.name";$newLine#*
    *##else#*
        *##tab(8)const entity = new $prefix#capitalize($field.name)(#*
        *##foreach($argument in $field.arguments)#*
            *##if ($foreach.count > 1), #end#*
            *#$argument.name#*
        *##end#*
        *#);$newLine#*
        *##tab(8)config(entity);$newLine#*
        *##tab(8)return entity.render(registry);$newLine#*
    *##end#*
    *##tab(4)});$newLine##
#end
#macro(renderArgumentField $field $prefix)#*
    *##tab(4)public $field.name = (#renderArguments($field, $prefix)) => this.push((registry) => {$newLine#*
    *##foreach($argument in $field.arguments)#*
        *##tab(8)const name$foreach.count = registry.register("$argument.name", $argument.name);$newLine#*
    *##end#*
    *##tab(8)return "${field.name}(#*
    *##foreach($argument in $field.arguments)#*
        *##if ($foreach.count > 1), #end#*
        *#$argument.name:$" + name$foreach.count + "#*
    *##end#*
    *#)";$newLine#*
    *##tab(4)});$newLine##
#end
#macro(renderArguments $field $prefix)#*
    *##foreach($argument in $field.arguments)#*
        *##if($foreach.count > 1), #end#*
        *##renderArgument($argument)#*
    *##end#*
    *##if($field.class.simpleName.equals("Entity"))#*
    *##if (!$field.arguments.isEmpty()), #end#*
    *#config:(_:#if(!$isIncomingType.apply($field))$prefix#end#capitalize($field.name)) => void#*
    *##end##
#end
#macro(renderArgument $argument)#*
    *#$argument.name:#toKotlinType($argument.type)#*
    *##if($argument.value) = $argument.value.value#end##
#end
#macro(renderEntityAsField $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity") && !$isIncomingType.apply($renderable))#*
        *#$newLine#renderField($renderable $prefix)#*
    *##end##
#end##
#macro(renderConstructor $entity)#*
    *##if(!$entity.arguments.isEmpty())#*
        *##foreach($argument in $entity.arguments)#*
            *##tab(4)private $argument.name:#toKotlinType($argument.type);$newLine#*
        *##end$newLine#*
        *##tab(4)constructor(#*
        *##foreach($argument in $entity.arguments)#*
            *##if($foreach.count > 1), #end#*
            *#$argument.name:#toKotlinType($argument.type)#*
        *##end#*
        *#) {$newLine#*
        *##tab(8)super();$newLine#*
        *##foreach($argument in $entity.arguments)#*
            *##tab(8)this.$argument.name = $argument.name;$newLine#*
        *##end#*
        *##tab(4)}$newLine$newLine#*
    *##end##
#end
#macro(renderIncomingType $renderable $nested)#*
    *##if($renderable.class.simpleName.equals("Entity") && ($nested || $isIncomingType.apply($renderable)))#*
        *#export class #capitalize($renderable.name) implements NameAware {$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##tab(4)$field.name?: #if($field.type)#toKotlinType($field.type)#else#capitalize($field.name)#end;#*
            *#$newLine#*
        *##end#*
        *#      public name(): string {$newLine#*
        *#          return '#capitalize($renderable.name)';$newLine#*
        *#      }$newLine#*
        *#}$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##if($field.class.simpleName.equals("Entity"))#*
                *##renderIncomingType($field, true)#*
            *##end#*
        *##end#*a
    *##end##
#end
