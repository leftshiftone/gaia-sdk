import {ClientOptions, HttpTransport, ITransporter} from '..';
import {#capitalize($name)Client} from './#capitalize($name)Client';

export class #capitalize($name)ClientBuilder {
#tab(4)private transporter: ITransporter;

#tab(4)private constructor(transporter: ITransporter) {
#tab(8)this.transporter = transporter;
#tab(4)}

#tab(4)public static http(url: string) {
#tab(8)return new #capitalize($name)ClientBuilder(new HttpTransport(url));
#tab(4)}

#tab(4)public withCredentials(credentials: #capitalize($name)Credentials) {
#tab(8)this.credentials = credentials;
#tab(8)return this;

#tab(4)public build() {
#tab(8)const options = new ClientOptions(this.credentials);
#tab(8)return new #capitalize($name)Client(options, this.transporter);
#tab(4)}

}

export interface #capitalize($name)Credentials
export class HMacCredentials(val apiKey: String, val apiSecret: String) implements #capitalize($name)Credentials
export class JWTTokenCredentials(val token: String)  implements #capitalize($name)Credentials

}
#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
