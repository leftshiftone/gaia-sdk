#parse("/template/python/RequestMacros.vm")
from api.VariableRegistry import VariableRegistry
from typing import Callable
import abc

"""
AUTOGENERATED CLASS. DO NOT MODIFY.
"""
class #capitalize($name)Request(list):
#if($hasQuery)
#tab(4)@staticmethod
#tab(4)def query(config:Callable[['#capitalize($name)QueryRequest'], None]):
#tab(8)request = #capitalize($name)QueryRequest()
#tab(8)config(request)
#tab(8)return request
#end

#if($hasMutation)
#tab(4)@staticmethod
#tab(4)def mutation(config:Callable[['#capitalize($name)MutationRequest'], None]):
#tab(8)request = #capitalize($name)MutationRequest()
#tab(8)config(request)
#tab(8)return request
#end

#tab(4)@abc.abstractmethod
#tab(4)def getStatement(self):
#tab(8)return

class #capitalize($name)QueryRequest(list):$newLine#*
*##tab(4)def __init__(self):$newLine#*
*##tab(8)super().__init__()$newLine#*
*##tab(8)self.preprocessors = []$newLine#*
*##foreach($ast in $list)#*
    *##if($ast.class.simpleName.equals("Query"))#*
        *##foreach($renderable in $ast.list)#*
            *##renderEntityAsField($renderable, "Query")#*
        *##end#*
    *##end##
#end##

#tab(4)def getStatement(self):
#tab(8)registry = VariableRegistry()
#tab(8)fields = " ".join(map(lambda e: e(registry), self))
#tab(8)statement = "query $name(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
#tab(8)return (statement, registry.getVariables())

#foreach($ast in $list)#*
    *##if($ast.class.simpleName.equals("Query"))#*
        *##foreach($renderable in $ast.list)#*
            *##renderEntity($renderable "Query")#*
        *##end#*
    *##end##
#end##
class #capitalize($name)MutationRequest(#capitalize($name)Request):$newLine#*
        *##tab(4)def __init__(self):$newLine#*
        *##tab(8)super().__init__()$newLine#*
        *##tab(8)self.preprocessors = []$newLine#*

        *##foreach($ast in $list)#*
            *##if($ast.class.simpleName.equals("Mutation"))#*
                *##foreach($renderable in $ast.list)#*
                    *##renderEntityAsField($renderable, "Mutation")#*
                *##end#*
                *##foreach($renderable in $ast.list)#*
                    *##renderField($renderable, "Mutation")#*
                *##end#*
            *##end##
        #end##

#tab(4)def getStatement(self):
#tab(8)registry = VariableRegistry()
#tab(8)fields = " ".join(map(lambda e: e(registry), self))
#tab(8)statement = "mutation $name(" + ", ".join(registry.getDatatypes()) + "{" + fields + "}"
#tab(8)return [statement, registry.getVariables()]

#foreach($ast in $list)#*
    *##if($ast.class.simpleName.equals("Mutation"))#*
        *##foreach($renderable in $ast.list)#*
            *##renderEntity($renderable "Mutation")#*
        *##end#*
        *##foreach($renderable in $ast.list)#*
            *##renderIncomingType($renderable, false)#*
        *##end#*
    *##end##
#end##
