import calendar
import itertools
import random
import time

from api.transporter.abstract_transporter import ITransporter
from graphql.#capitalize($name)Request import #capitalize($name)Request
from graphql.#capitalize($name)Response import #capitalize($name)Response


class #capitalize($name)Client(object):

#tab(4)def __init__(self, transporter: ITransporter):
#tab(8)self.transporter = transporter
#tab(8)self.counter = itertools.count(random.randint(0, 1000000))

#tab(4)def execute_native(self, statement, variables, preprocessors):
#tab(8)payload = {
#tab(12)"statement": statement,
#tab(12)"variables": variables,
#tab(12)"timestamp": calendar.timegm(time.gmtime()),
#tab(12)"nonce": self.counter.__next__(),
#tab(12)"preprocessors": preprocessors
#tab(8)}

#tab(8)return #capitalize($name)Response(self.transporter.transport(payload))

#tab(4)def execute(self, request:#capitalize($name)Request):
#tab(8)statement = "query atlas($text: String!, $merge: Boolean!) { ver nlu(text: $text, merge: $merge) { " + (" ".join(request)) + "}}"
#tab(8)variables = {"text": request.text, "merge": request.merge}

#tab(8)return self.execute_native(statement, variables, [])
#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
