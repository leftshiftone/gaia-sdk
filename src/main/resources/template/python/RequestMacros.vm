#macro(toKotlinType $type)
    #if ($type.class.simpleName.equals("StringType"))str##
    #elseif ($type.class.simpleName.equals("IntType"))int##
    #elseif ($type.class.simpleName.equals("FloatType"))float##
    #elseif ($type.class.simpleName.equals("LongType"))int##
    #elseif ($type.class.simpleName.equals("BooleanType"))bool##
    #elseif ($type.class.simpleName.equals("MapType"))dict##
    #elseif ($type.class.simpleName.equals("ListType"))#print("['")#toKotlinType($type.type)#print("']")##
    #elseif ($type.class.simpleName.equals("ArrayType") && $type.type.class.simpleName.equals("ByteType"))Uint8Array##
    #elseif ($type.class.simpleName.equals("DateType"))datetime##
    #else #capitalize($type.name)##
    #end
#end
#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
#macro(renderEntity $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity") && !$isIncomingType.apply($renderable))#*
        *#class $prefix#capitalize($renderable.name)(list):$newLine#*
        *##renderConstructor($renderable)#*
        *##renderFields($renderable, $prefix)#*
        *#$newLine#tab(4)def render(self, registry:VariableRegistry):$newLine#*
            *##foreach($argument in $renderable.arguments)#*
                *##tab(8)name$foreach.count = registry.register("$argument.name", self.$argument.name)$newLine#*
            *##end#*
            *##tab(8)return "${renderable.name}#if(!$renderable.arguments.isEmpty())(#end#*
            *##foreach($argument in $renderable.arguments)#*
                *##if ($foreach.count > 1), #end#*
                *#$argument.name:$" + name$foreach.count + "#*
            *##end#*
            *##if(!$renderable.arguments.isEmpty()))#end { " + " ".join(map(lambda e: e(registry), self)) + " }"$newLine#*
        *#$newLine$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##renderEntity($field $prefix)#*
        *##end#*
    *##end##
#end
##
## Renders all entity fields
## *************************
#macro(renderFields $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity"))#*
        *##foreach($field in $renderable.fields)#*
            *##renderField($field, $prefix)#*
        *##end#*
    *##end##
#end##
#macro(renderField $field $prefix)#*
    *##if($field.type.class.simpleName.equals("RefType"))#*
        *##renderRefType($field, $prefix)#*
    *##elseif ($isIncomingType.apply($field))#*
        *##if ($field.class.simpleName.equals("Field"))#*
            *##renderArgumentField($field, $prefix)#*
        *##end#*
    *##elseif ($field.class.simpleName.equals("Entity"))#*
        *##renderEntityField($field $prefix)#*
    *##elseif ($field.arguments.isEmpty())#*
        *##renderNoArgumentField($field)#*
    *##else#*
        *##renderArgumentField($field, $prefix)#*
    *##end##
#end##
#macro(renderNoArgumentField $field)#*
    *##tab(4)def ${field.name}(self):$newLine#*
    *##tab(8)self.append(lambda x: "$field.name")$newLine$newLine##
#end
#macro(renderRefType $field $prefix)#*
    *##tab(4)def ${field.name}(self, config:Callable[['$prefix#capitalize($field.type.name)'], None]):$newLine#*
    *##tab(8)entity = $prefix#capitalize($field.type.name)()$newLine#*
    *##tab(8)config(entity)$newLine#*
    *##tab(8)self.append(lambda registry: "$field.name { " + (entity.render(registry)) + " }")$newLine$newLine##
#end
#macro(renderEntityField $field $prefix)#*
    *##tab(4)def ${field.name}(self, #renderArguments($field, $prefix)):$newLine#*
    *##tab(8)def callback(registry:VariableRegistry):$newLine#*
    *##if($isIncomingType.apply($field))#*
        *##foreach($argument in $field.arguments)#*
            *##tab(12)name$foreach.count = registry.register("$argument.name", $argument.name);$newLine#*
        *##end#*
        *##tab(12)return "$field.name";$newLine#*
    *##else#*
        *##tab(12)entity = $prefix#capitalize($field.name)(#*
        *##foreach($argument in $field.arguments)#*
            *##if ($foreach.count > 1), #end#*
            *#$argument.name#*
        *##end#*
        *#)$newLine#*
        *##tab(12)config(entity)$newLine#*
        *##tab(12)return entity.render(registry)$newLine#*
    *##end#*
    *##tab(8)self.append(callback)$newLine##
#end
#macro(renderArgumentField $field $prefix)#*
    *##tab(4)def ${field.name}(self, #renderArguments($field, $prefix)):$newLine#*
    *##tab(8)def callback(registry:VariableRegistry):$newLine#*
    *##foreach($argument in $field.arguments)#*
        *##tab(12)name$foreach.count = registry.register("$argument.name", $argument.name)$newLine#*
    *##end#*
    *##tab(12)return "${field.name}(#*
    *##foreach($argument in $field.arguments)#*
        *##if ($foreach.count > 1), #end#*
        *#$argument.name:$" + name$foreach.count + "#*
    *##end#*
    *#)"$newLine#*
    *##tab(8)self.append(callback)$newLine$newLine##
#end
#macro(renderArguments $field $prefix)#*
    *##foreach($argument in $field.arguments)#*
        *##if($foreach.count > 1), #end#*
        *##renderArgument($argument)#*
    *##end#*
    *##if($field.class.simpleName.equals("Entity"))#*
    *##if (!$field.arguments.isEmpty()), #end#*
    *#config:Callable[['#if(!$isIncomingType.apply($field))$prefix#end#capitalize($field.name)'], None]#*
    *##end##
#end
#macro(renderArgument $argument)#*
    *#$argument.name:#toKotlinType($argument.type)##
#end
#macro(renderEntityAsField $renderable $prefix)#*
    *##if($renderable.class.simpleName.equals("Entity") && !$isIncomingType.apply($renderable))#*
        *#$newLine#renderField($renderable $prefix)#*
    *##end##
#end##
#macro(renderConstructor $entity)#*
    *##if(!$entity.arguments.isEmpty())#*
        *##tab(4)def __init__(self#if(!$entity.arguments.isEmpty()), #end#*
        *##foreach($argument in $entity.arguments)#*
            *##if($foreach.count > 1), #end#*
            *#$argument.name:#toKotlinType($argument.type)#*
        *##end#*
        *#):$newLine#*
        *##tab(8)super().__init__()$newLine#*
        *##foreach($argument in $entity.arguments)#*
            *##tab(8)self.$argument.name = $argument.name$newLine#*
        *##end#*
        *#$newLine#*
    *##end##
#end
#macro(renderIncomingType $renderable $nested)#*
    *##if($renderable.class.simpleName.equals("Entity") && ($nested || $isIncomingType.apply($renderable)))#*
        *#class #capitalize($renderable.name) {$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##tab(4)$field.name?: #if($field.type)#toKotlinType($field.type)#else#capitalize($field.name)#end;#*
            *#$newLine#*
        *##end#*
        *#}$newLine#*
        *##foreach($field in $renderable.fields)#*
            *##if($field.class.simpleName.equals("Entity"))#*
                *##renderIncomingType($field, true)#*
            *##end#*
        *##end#*a
    *##end##
#end
#macro(renderValue $value)#*
    *##if ($value.class.simpleName.equals("BooleanValue"))#capitalize($value.value.toString())#*
    *##else$value.value#end##
#end
