package gaia.sdk

#if ($hasMutation)import gaia.sdk.response.type.Mutation$newLine#end
#if ($hasQuery)import gaia.sdk.response.type.Query$newLine#end
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonCreator

abstract class #capitalize($name)Response {

#if ($hasQuery)#*
    *##tab(4)data class #capitalize($name)QueryResponse @JsonCreator constructor($newLine#*
    *##tab(8)@JsonProperty("data") val data: Query?,$newLine#*
    *##tab(8)@JsonProperty("extensions")val extensions: #print("Map<String, Any>?"),$newLine#*
    *##tab(8)@JsonProperty("errors")val errors: #print("List<Map<String, Any>>?")): #capitalize($name)Response()$newLine##
#end

#if ($hasMutation)#*
    *##tab(4)data class #capitalize($name)MutationResponse @JsonCreator constructor($newLine#*
    *##tab(8)@JsonProperty("data") val data: Mutation?,$newLine#*
    *##tab(8)@JsonProperty("extensions") val extensions: #print("Map<String, Any>?"),$newLine#*
    *##tab(8)@JsonProperty("errors") val errors: #print("List<Map<String, Any>>?")): #capitalize($name)Response()$newLine##
#end

}
#macro(tab $indent)${tab.invoke($indent)}#end
#macro(print $text)${print.invoke($text)}#end
#macro(capitalize $str)${str.substring(0, 1).toUpperCase()}${str.substring(1)}#end
