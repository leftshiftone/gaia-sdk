#parse("/template/java/RequestMacros.vm")
package gaia.sdk.$name

import com.fasterxml.jackson.databind.ObjectMapper
import gaia.sdk.api.ClientOptions
import gaia.sdk.api.ITransporter
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import java.security.SecureRandom
import java.util.*
import java.util.concurrent.atomic.AtomicLong
import kotlin.collections.ArrayList
import kotlin.reflect.KClass

// AUTOGENERATED CLASS. DO NOT MODIFY.
class #capitalize($name)Client(private val options: ClientOptions, private val transporter: ITransporter) {

#tab(4)companion object {
#tab(8)private val log = LoggerFactory.getLogger(this::class.java.enclosingClass)
#tab(4)}

#tab(4)private val json = ObjectMapper()
#tab(4)private val nonce = AtomicLong(SecureRandom().nextLong())

#tab(4)fun #print("<T:")#capitalize($name)Response#print(">")executeNative(statement: String, variables:#*
*#Map${lt}String, Any${gt}, preprocessors: List${lt}String${gt}, type:KClass#print("<T>")): #*
*#Publisher${lt}T${gt} {
#tab(8)val body = HashMap${lt}String, Any${gt}()
#tab(8)body.put("statement", statement)
#tab(8)body.put("variables", variables)
#tab(8)body.put("timestamp", System.currentTimeMillis())
#tab(8)body.put("nonce", java.lang.Long.toString(nonce.getAndIncrement()))
#tab(8)body.put("preprocessors", preprocessors)

#tab(8)if (log.isDebugEnabled) {
#tab(12)log.debug("Statement: #print("$")statement")
#tab(12)log.debug("Variables: #print("$")variables")
#tab(8)}
#tab(8)val payload = json.writeValueAsBytes(body)
#tab(8)if (log.isTraceEnabled) {
#tab(12)log.trace("Payload: #print("$"){String(payload)}")
#tab(8)}
#tab(8)return transporter.transport(options, type.java, payload);
#tab(4)}

#if($hasQuery)
    #tab(4)fun query(request: #capitalize($name)Request.#capitalize($name)QueryRequest): #*
*#Publisher${lt}#capitalize($name)Response.#capitalize($name)QueryResponse${gt} {
    #tab(8)val (statement, variables) = request.getStatement()
    #tab(8)return executeNative(statement, variables, request.preprocessors, #capitalize($name)Response.#capitalize($name)QueryResponse::class)
    #tab(4)}
#end
#if($hasMutation)
    #tab(4)fun mutation(request: #capitalize($name)Request.#capitalize($name)MutationRequest): #*
    *#Publisher${lt}#capitalize($name)Response.#capitalize($name)MutationResponse${gt} {
    #tab(8)val (statement, variables) = request.getStatement()
    #tab(8)return executeNative(statement, variables, request.preprocessors,#capitalize($name)Response.#capitalize($name)MutationResponse::class)
    #tab(4)}
#end

}
