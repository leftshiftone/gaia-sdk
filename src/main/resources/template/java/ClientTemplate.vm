package gaia.sdk

import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.ObjectMapper
import gaia.sdk.client.Type
import gaia.sdk.client.VariableRegistry
import gaia.sdk.spi.ClientOptions
import gaia.sdk.request.type.Mutation
import gaia.sdk.request.type.Query
import gaia.sdk.spi.ITransporter
import io.reactivex.Flowable
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import java.security.SecureRandom
import java.util.*
import java.util.concurrent.atomic.AtomicLong
import kotlin.reflect.KClass

//Class generated from template src/main/resources/template/java/ClientTemplate.vm

class #capitalize($name)Client(private val options: ClientOptions, private val transporter: ITransporter) {

#tab(4)companion object {
#tab(8)private val log = LoggerFactory.getLogger(this::class.java.enclosingClass)
#tab(4)}

#tab(4)private val jsonparser = ObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)

#tab(4)fun #print("<T:")#capitalize($name)Response#print(">")executeNative(statement: String, variables:#*
*#Map${lt}String, Any${gt}, type:KClass#print("<T>")): #*
*#Publisher${lt}T${gt} {
#tab(8)val body = HashMap${lt}String, Any${gt}()
#tab(8)body["statement"] = statement
#tab(8)body["variables"] = variables

#tab(8)if (log.isDebugEnabled) {
#tab(12)log.debug("Statement: #print("$")statement")
#tab(12)log.debug("Variables: #print("$")variables")
#tab(8)}
#tab(8)if (log.isTraceEnabled) {
#tab(12)log.trace("Payload: #print("$")body")
#tab(8)}
#tab(8)val bytes = jsonparser.writeValueAsBytes(body)

#tab(8)return transporter.transport(options, bytes).byteArrayCast(jsonparser, type.java)

#tab(4)}

#if($hasQuery)
    #tab(4)fun query(request: Query): Publisher${lt}#capitalize($name)Response.QueryResponse${gt} {
    #tab(8)val (statement, variables) = getStatement("query", request)
    #tab(8)return executeNative(statement, variables, #capitalize($name)Response.QueryResponse::class)
    #tab(4)}
#end
#if($hasMutation)
    #tab(4)fun mutation(request: Mutation): Publisher${lt}#capitalize($name)Response.MutationResponse${gt} {
    #tab(8)val (statement, variables) = getStatement("mutation", request)
    #tab(8)return executeNative(statement, variables, #capitalize($name)Response.MutationResponse::class)
    #tab(4)}
#end

#tab(4)private fun getStatement(name: String, type: Type):Pair#print("<String, Map<String, Any>>") {
#tab(8)val registry = VariableRegistry()
#tab(8)val fields = type.map { it(registry) }.joinToString(" ")
#tab(8)if (registry.getDatatypes().isEmpty()) {
#tab(12)val statement = "#print("$")name $name { $fields }"
#tab(12)return Pair(statement, registry.getVariables())
#tab(8)}
#tab(8)val statement = "#print("$")name $name(${registry.getDatatypes().joinToString(", ")}) { $fields }"
#tab(8)return Pair(statement, registry.getVariables())
#tab(4)}

}
#macro(tab $indent)${tab.invoke($indent)}#end
#macro(print $text)${print.invoke($text)}#end
#macro(capitalize $str)${str.substring(0, 1).toUpperCase()}${str.substring(1)}#end
