package gaia.sdk

import gaia.sdk.spi.ClientOptions
import gaia.sdk.spi.ITransporter

//Class generated from template src/main/resources/template/java/ClientBuilderTemplate.vm

class #capitalize($name)ClientBuilder (private val transporter: ITransporter) {

#tab(4)lateinit var credentials: GaiaCredentials
#tab(4)var contentType: String = "application/json"

#tab(4)fun withCredentials(credentials: GaiaCredentials): GaiaClientBuilder {
#tab(8)this.credentials=credentials
#tab(8)return this
#tab(4)}

#tab(4)fun withContentType(contentType: String) : GaiaClientBuilder {
#tab(8)this.contentType = contentType
#tab(8)return this
#tab(4)}

#tab(4)fun build(): #capitalize($name)Client {
#tab(8)val options = ClientOptions(credentials, contentType)
#tab(8)return #capitalize($name)Client(options, transporter)
#tab(4)}


}

interface #capitalize($name)Credentials
class HMACCredentials(val apiKey: String, val apiSecret: String) : #capitalize($name)Credentials
class JWTCredentials(val token: String) : #capitalize($name)Credentials

#macro(tab $indent)${tab.invoke($indent)}#end
#macro(print $text)${print.invoke($text)}#end
#macro(capitalize $str)${str.substring(0, 1).toUpperCase()}${str.substring(1)}#end
