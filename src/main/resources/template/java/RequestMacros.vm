#macro(capitalize $str)#*
    *#${str.substring(0, 1).toUpperCase()}${str.substring(1)}##
#end
##
#macro(toKotlinType $type)
    #if ($type.class.simpleName.equals("StringType"))String##
    #elseif ($type.class.simpleName.equals("IntType"))Int##
    #elseif ($type.class.simpleName.equals("FloatType"))Float##
    #elseif ($type.class.simpleName.equals("BooleanType"))Boolean##
    #elseif ($type.class.simpleName.equals("MapType"))Map#print("<")String, Any#print(">")##
    #elseif ($type.class.simpleName.equals("ArrayType") && $type.type.class.simpleName.equals("ByteType"))ByteArray##
    #else #capitalize($type.name)##
    #end
#end
#macro(renderOptional $argument)#*
    *##if($argument.type.optional)?#end##
#end
##
#macro(renderAssignment $argument)#*
    *##if($argument.value) = $argument.value.value#end##
#end
##
#macro(renderArgsDef $argumentAware)##
    #foreach($argument in $argumentAware.arguments)#*
        *##if($foreach.count > 1), #end#*
        *#$argument.name:#toKotlinType(${argument.type})#*
        *##renderOptional($argument)#renderAssignment($argument)#*
    *##end
#end
#macro(renderFieldArguments $argumentAware)
    #foreach($argument in $argumentAware.arguments)#*
        *##if($foreach.count.equals(1))(#end#*
        *##if($foreach.count > 1), #end#*
        *#$argument.name:#print("\$$")name$foreach.count#*
        *##if($foreach.count.equals($argumentAware.arguments.size())))#end#*
    *##end##
#end
##
## Renders an entity callback closure
## **********************************
#macro(renderEntity $entity $indent)#*
*#${newLine}#tab($indent)class #capitalize(${entity.name})#renderConstructor($entity) #*
    *#: ArrayList<(VariableRegistry) -> String>() {#*
    *#$newLine#*
    *##set($indent =  $indent + 4)#*
    *##foreach($field in $entity.fields)#*
        *##renderRenderable($field $indent)#*
    *##end#*
    *#$newLine#*
    *##tab($indent)fun render(registry:VariableRegistry, name:String = "${entity.name}"): String {$newLine#*
        *##set($indent =  $indent + 4)#*
        *##foreach($argument in $entity.arguments)#*
            *##tab($indent)val name$foreach.count = registry.register("$argument.name", $argument.name)$newLine#*
        *##end#*
        *##tab($indent)return "\$name#renderFieldArguments($entity) { #*
        *##print("$"){joinToString(" ") { it(registry) }} }"$newLine#*
        *##set($indent =  $indent - 4)#*
    *##tab($indent)}#*
    *#$newLine#*
    *##set($indent =  $indent - 4)#*
    *##tab($indent)}$newLine$newLine##
#end##
##
## Renders an entity AST
## *********************
#macro(renderRenderable $renderable $indent)#*
    *##if($renderable.class.simpleName.equals("Option"))#*
        *##tab($indent)#renderOption($renderable)#*
    *##end#*
    *##if($renderable.class.simpleName.equals("Entity"))#*
        *##if(${isIncomingType.apply($renderable)})#*
            *##tab($indent)#*
            *##renderType($renderable $indent)#*
        *##else#*
            *##tab($indent)#*
            *##renderEntity($renderable $indent)#*
            *##renderField($renderable $indent)#*
        *##end#*
    *##end#*
    *##if($renderable.class.simpleName.equals("Field"))#*
        *##renderField($renderable $indent)#*
    *##end
#end##
##
#macro(renderField $field $indent)#*
    *##tab($indent)#*
    *##if($field.class.simpleName.equals("Field"))#*
        *##if($field.type.class.simpleName.equals("RefType"))#*
            *#fun ${field.name}(config: #capitalize(${field.type.name}).() -> Unit) = add { #*
            *##capitalize(${field.type.name})().apply(config).render(it, "${field.name}") }#*
        *##elseif($field.type.class.simpleName.equals("ListType") && $field.type.type.class.simpleName.equals("RefType"))#*
            *#fun ${field.name}(config: #capitalize(${field.type.type.name}).() -> Unit) = add { #*
            *##capitalize(${field.type.type.name})().apply(config).render(it, "${field.name}") }#*
        *##elseif (!$field.arguments.isEmpty())#*
            *#fun ${field.name}(#renderArgsDef($field)) = add { $newLine#*
                *##set($indent =  $indent + 4)#*
                *##foreach($argument in $field.arguments)#*
                    *##tab($indent)val name$foreach.count = it.register("$argument.name", $argument.name)$newLine#*
                *##end#*
                *##tab($indent)"${field.name}#renderFieldArguments($field)" $newLine#*
                *##set($indent =  $indent - 4)#*
                *##tab($indent)}#*
        *##else#*
            *#fun ${field.name}() = add { "${field.name}" }#*
        *##end#*
        ## Render entity field decleration
    *##elseif(!$field.arguments.isEmpty())#*
        *#fun ${field.name}(#renderArgsDef($field), config: #capitalize(${field.name}).() -> Unit) = add {#*
        *##capitalize(${field.name})(#renderParameters($field)).apply(config).render(it) }#*
    *##else#*
        *#fun ${field.name}(config: #capitalize(${field.name}).() -> Unit) = add {#*
        *##capitalize(${field.name})().apply(config).render(it) }#*
    *##end##
#end##
##
#macro(tab $indent)#*
    *#${tab.invoke($indent)}##
#end
#macro(print $text)#*
    *#${print.invoke($text)}##
#end
##
#macro(renderOption $option)#*
*#var ${option.name} : #toKotlinType(${option.type}) = $option.value.value##
#end
##
#macro(renderQuery $ast $indent)#*
    *##if($ast.class.simpleName.equals("Query"))#*
        *##foreach($renderable in $ast.list)#*
            *##renderRenderable($renderable $indent)#*
        *##end#*
    *##end##
#end
##
#macro(renderMutation $ast $indent)#*
    *##if($ast.class.simpleName.equals("Mutation"))#*
        *##foreach($renderable in $ast.list)#*
            *##renderRenderable($renderable $indent)#*
        *##end#*
    *##end##
#end##
#macro(renderConstructor $entity)#*
    *##if(!$entity.arguments.isEmpty())(#end#*
    *##foreach($argument in $entity.arguments)#*
        *##if($foreach.count > 1), #end#*
        *#private val ${argument.name}:Any#*
    *##end#*
    *##if(!$entity.arguments.isEmpty()))#end##
#end
#macro(renderParameters $field)#*
    *##foreach($argument in $field.arguments)#*
        *##if($foreach.count > 1), #end#*
        *#${argument.name}#*
    *##end##
#end
##
## Renders an entity callback closure
## **********************************
#macro(renderType $entity $indent)#*
*#class #capitalize(${entity.name})#renderConstructor($entity) {#*
    *#$newLine#*
    *##set($indent =  $indent + 4)#*
    *##foreach($field in $entity.fields)#*
        *##if($field.class.simpleName.equals("Field"))#*
            *##tab($indent)#*
            *#lateinit var ${field.name}:#toKotlinType(${field.type})#*
            *#$newLine#*
        *##else#*
            *##tab($indent)#*
            *#lateinit var ${field.name}:#capitalize($field.name)#*
            *#$newLine$newLine#*
            *##tab($indent)#*
            *##renderType($field, $indent)#*
        *##end#*
    *##end#*
    *##set($indent =  $indent - 4)#*
    *##tab($indent)}$newLine$newLine##
#end##
