#parse("/template/java/RequestMacros.vm")
package gaia.sdk.$name

import VariableRegistry

// AUTOGENERATED CLASS. DO NOT MODIFY.
@Suppress("unused", "SpellCheckingInspection")
abstract class #capitalize($name)Request #*
*#: ArrayList#print("<")(VariableRegistry) -> String#print(">")() {

#tab(4)companion object {
#if($hasQuery)#*
    *##tab(8)@JvmStatic$newLine#*
    *##tab(8)fun query(config: #capitalize($name)QueryRequest.() -> Unit): #capitalize($name)QueryRequest {$newLine#*
    *##tab(12)return #capitalize($name)QueryRequest().apply(config)$newLine#*
    *##tab(8)}$newLine##
#end##
#if($hasMutation)#*
    *##tab(8)@JvmStatic#*
    *#$newLine#*
    *##tab(8)fun mutation(config: #capitalize($name)MutationRequest.() -> Unit): #capitalize($name)MutationRequest {$newLine#*
    *##tab(12)return #capitalize($name)MutationRequest().apply(config)$newLine#*
    *##tab(8)}$newLine##
#end##
#if($hasSubscription)#*
    *##tab(8)@JvmStatic#*
    *#$newLine#*
    *##tab(8)fun subscription(config: #capitalize($name)SubscriptionRequest.() -> Unit): #capitalize($name)
SubscriptionRequest {
    #tab(12)return #capitalize($name)SubscriptionRequest().apply(config)
    #tab(8)}
#end##
#tab(4)}

#tab(4)val preprocessors = ArrayList${lt}String${gt}()

#tab(4)abstract fun getStatement():Pair#print("<")String, Map#print("<")String, Any#print(">")#print(">")
#if($hasQuery)#*
    *##tab(4)class #capitalize($name)QueryRequest: #*
    *##capitalize($name)Request() {$newLine#*
    *##foreach($ast in $list)#*
        *##renderQuery($ast 8)#*
    *##end##

    #tab(8)override fun getStatement():Pair#print("<")String, Map#print("<")String, Any#print(">")#print(">") {$newLine#*
    *##tab(12)val registry = VariableRegistry()$newLine#*
    *##tab(12)val fields = map { it(registry) }.joinToString(" ")$newLine#*
    *##tab(12)val statement = "query $name(#print("$"){registry.getDatatypes().joinToString(", ")}) { #print("$")fields }"$newLine#*
    *##tab(12)return Pair(statement, registry.getVariables())$newLine#*
    *##tab(8)}##

    #tab(4)}
#end

#if($hasMutation)##
    #tab(4)class #capitalize($name)MutationRequest: #capitalize($name)Request() {$newLine#*
        *##foreach($ast in $list)#*
            *##renderMutation($ast 8)#*
        *##end

    #tab(8)override fun getStatement():Pair#print("<")String, Map#print("<")String, Any#print(">")#print(">") {$newLine#*
    *##tab(12)val registry = VariableRegistry()$newLine#*
    *##tab(12)val fields = map { it(registry) }.joinToString(" ")$newLine#*
    *##tab(12)val statement = "mutation $name(#print("$"){registry.getDatatypes().joinToString(", ")}) { #print("$")fields }"$newLine#*
    *##tab(12)return Pair(statement, registry.getVariables())$newLine#*
    *##tab(8)}$newLine##
    #tab(4)}
#end

}
