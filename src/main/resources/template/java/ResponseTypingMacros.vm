## ******************
## Renders a type AST
## ******************
#macro(renderType $type $indent)#*
    *##renderDescription($type $indent)#*
    *##tab($indent)data class ${type.name} @JsonCreator constructor($newLine#*
    *##set($indent = $indent + 4)#*
    *##foreach($field in $type.fields)#*
        *##renderDescription($field $indent)#*
        *##tab($indent)#renderField($field)#if($foreach.hasNext), #end$newLine#*
    *##end#*#*
    *##set($indent = $indent - 4)#*
    *##tab($indent))##
#end##
#macro(renderField $field)#*
    *##if($field.type.isList())#*
    *#@JsonProperty("$field.name") val $field.name:List<$field.type.name()>? = null#*
    *##else#*
    *#@JsonProperty("$field.name") val $field.name:$field.type.name()? = null#*
    Â´*##end##
#end
## **************************
## Renders a description text
## **************************
#macro(renderDescription $target $indent)#*
    *##if($target.description)#*
        *##tab($indent)/**$newLine#*
        *##foreach($line in $target.description.text.split("\n"))#*
            *##tab($indent)* $line$newLine#*
        *##end#*
        *##tab($indent)*/$newLine#*
    *##end##
#end##
#macro(tab $indent)${tab.invoke($indent)}#end
#macro(capitalize $str)${str.substring(0, 1).toUpperCase()}${str.substring(1)}#end
#macro(print $text)${print.invoke($text)}#end
