type Retrieval {
    "Container element which collects all information static data"
    knowledge: Knowledge
    "Container element which collects all information about runtime data"
    experience: Experience
}

type Knowledge {
    users(limit: Int, offset: Int, orderBy: OrderByField, order: Order): [User]
    user(userId: Uuid): User
    apiKeys(limit: Int, offset: Int, orderBy: OrderByField, order: Order): [ApiKey]
    apiKey(apiKeyId: Uuid): ApiKey
    roles(tenantId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Role]
    role(tenantId: Uuid, roleId: Uuid): Role
    tenants(limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Tenant]
    tenant(tenantId: Uuid): Tenant
    identities(limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Identity]
    identity(identityId: Uuid): Identity
    intents(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Intent]
    intent(identityId: Uuid, reference: Uuid): Intent
    prompts(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Prompt]
    prompt(identityId: Uuid, reference: Uuid): Prompt
    fulfilments(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Fulfilment]
    fulfilment(identityId: Uuid, reference: Uuid): Fulfilment
    statements(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Statement]
    statement(identityId: Uuid, reference: Uuid): Statement
    codes(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Code]
    code(identityId: Uuid, reference: Uuid): Code
    behaviours(identityId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Behaviour]
    behaviour(identityId: Uuid, reference: Uuid): Behaviour
    edges(source: Uuid, limit: Int, offset: Int, orderBy: EdgeOrderByField, order: Order): [Edge]
    edge(source: Uuid, edgeId: Uuid): Edge
    skills(tenantId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [Skill]
    skill(tenantId: Uuid, reference: Uuid): Skill
    skillProvisions(tenantId: Uuid, limit: Int, offset: Int, orderBy: OrderByField, order: Order): [SkillProvision]
    skillProvision(tenantId: Uuid, reference: Uuid): SkillProvision
}

"Container type for runtime information"
type Experience {
    behaviourExecution(identityId: Uuid, processInstanceId: Uuid): BehaviourExecutionDetail
    behaviourExecutions(identityId: Uuid, limit: Int, offset: Int, startDate: String, endDate: String): [BehaviourExecution]
    behaviourNodeExecutions: [BehaviourNodeExecution]
    identityMetrics(identityId: Uuid, startDate: String, limit: Int): IdentityMetrics
    skillProvisionBuildJobs(tenantId: Uuid): [SkillProvisionBuildJob]
}

enum OrderByField {
    id
    qualifier
    appendent
    createdAt
    updatedAt
}

enum EdgeOrderByField {
    label
    createdAt
    updatedAt
}

enum Order {
    ASC
    DESC
}
