query {
    addPunctuationPreprocessor:boolean = false
    removeSignaturePreprocessor:boolean = false

    nlu(text:string, merge:boolean = false) {
       txt:string
       raw:string
       cls(qualifier:string = "default"):string
       list(lex) {
          lemma:string
          pos:string
          base:string
          flexions:ref(lex)
          synonyms:ref(lex)
          collocations:ref(lex)
          hyperonyms:ref(lex)
          meronyms:ref(lex)
          parts:ref(lex)
          abbreviations:ref(lex)
          causations:ref(lex)
          labels:list(string)
       }
       list(dep) {
          sourcePos:string
          targetPos:string
          sourceTag:string
          targetTag:string
          sourceIndex:int
          targetIndex:int
          sourceBase:string
          targetBase:string
          @Deprecated("text")
          main:boolean
          @Deprecated("text")
          modifier:boolean
          @Deprecated("text")
          parenthesized:boolean
          source:string
          target:string
          relation:string
          rawRelation:string
       }
       ner {
          datetime {
             date:date
             date1:date
             date2:date
             negation:boolean
             fuzzy:boolean
             indices:list(int)
          }
          duration {
             amount:int
             amountMin:int
             amountMax:int
             unit:string
             negation:boolean
             indices:list(int)
          }
          location(normalized:boolean = true) {
             name:string
             type:string
             negation:boolean
             indices:list(int)
          }
          organization {
             name:string
             type:string
             negation:boolean
             indices:list(int)
          }
          accommodation {
             name:string
             type:string
             amount:int
             negation:boolean
             indices:list(int)
          }
          person {
             name:string
             isAdult:boolean
             age:int
             negation:boolean
             indices:list(int)
          }
          price {
             amount:float
             amountMin:float
             amountMax:float
             currency:string
             priceCategory:string
             sensibility:string
             scope:string
             negation:boolean
             indices:list(int)
          }
          @Deprecated("text")
          age {
             age:int
             negation:boolean
             indices:list(int)
          }
          bool:boolean
          email:string
          url:string
          custom(qualifier:string) {
             data:map
             negation:boolean
             indices:list(int)
          }
       }
    }
}
