query {
    insights(identityId:string) {
       classify(text:string) {
          qualifier:string
          reference:string
          score:float
       }
       gaiaQuery(statement:string):list(map)
    }
    skills(tenantId:string) {
        status(skillName:string) {
            name: string
            status: string
            created: string
        }
    }
}

mutation {
    @IncomingType
    receptionImpulse {
       identityId:string
       clientId:string
       userId:string
       attributes:map
    }
    @IncomingType
    buttonImpulse {
       identityId:string
       clientId:string
       userId:string
       attributes:map
    }
    @IncomingType
    submitImpulse {
       identityId:string
       clientId:string
       userId:string
       attributes:map
    }
    @IncomingType
    suggestionImpulse {
       identityId:string
       clientId:string
       userId:string
       attributes:map
    }
    @IncomingType
    utteranceImpulse {
       identityId:string
       clientId:string
       userId:string
       payload:string
    }

    handleReception(impulse:receptionImpulse):boolean
    handleUtterance(impulse:utteranceImpulse):boolean
    handleSuggestion(impulse:suggestionImpulse):boolean
    handleButton(impulse:buttonImpulse):boolean
    handleSubmit(impulse:submitImpulse):boolean

    @IncomingType
    initiateUploadImpulse {
        fileName: string
    }

    @IncomingType
    transferChunkImpulse {
        key: string
        transportId: string
        partNumber: int = 0
        partSize: long = 0
        encodedBytes: string
    }

    @IncomingType
    completeUploadImpulse {
        key: string
        transportId: string
        etags: list(map)
    }

    @IncomingType
    abortUploadImpulse {
        key: string
        transportId: string
    }

    @IncomingType
    hazeArtifact {
        qualifier: string
        appendent: string
        labelList: list(string)
        type: string
    }

    artifacts(tenantId:string) {
        initiateUpload(impulse: initiateUploadImpulse) {
            transportId:string
            key: string
        }
        transferChunk(impulse: transferChunkImpulse) {
            transportId:string
            key: string
            partNumber:int
            etag:string
        }
        completeUpload(impulse: completeUploadImpulse, artifact: hazeArtifact) {
            location:string
            key:string
            etag:string
        }
        abortUpload(impulse: abortUploadImpulse):boolean
    }
}
