

import VariableRegistry from "../api/VariableRegistry";

// AUTOGENERATED CLASS. DO NOT MODIFY.
export abstract class RainRequest extends Array<(_:VariableRegistry) => string> {
    public static query(config:(_:RainQueryRequest) => void) {
        const request = new RainQueryRequest();
        config(request);
        return request;
    }
    abstract getStatement():[string, {}];
}

export class RainQueryRequest extends RainRequest {
    public preprocessors:Array<string> = new Array<string>();

    public insights = (identity:string, config:(_:QueryInsights) => void) => this.push((registry) => {
        const entity = new QueryInsights(identity);
        config(entity);
        return entity.render(registry);
    });

    public getStatement = ():[string, {}] => {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query rain(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

class QueryInsights extends Array<(_:VariableRegistry) => string> {
    private identity:string;

    constructor(identity:string) {
        super();
        this.identity = identity;
    }

    public classify = (text:string, config:(_:QueryClassify) => void) => this.push((registry) => {
        const entity = new QueryClassify(text);
        config(entity);
        return entity.render(registry);
    });
    public rainQuery = (statement:string) => this.push((registry) => {
        const name1 = registry.register("statement", statement);
        return "rainQuery(statement:$" + name1 + ")";
    });

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("identity", this.identity);
        return "insights(identity:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryClassify extends Array<(_:VariableRegistry) => string> {
    private text:string;

    constructor(text:string) {
        super();
        this.text = text;
    }

    public qualifier = () => this.push(() => "qualifier");
    public reference = () => this.push(() => "reference");
    public score = () => this.push(() => "score");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("text", this.text);
        return "classify(text:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class RainMutationRequest extends RainRequest {
public preprocessors:Array<string> = new Array<string>();
    public getStatement():[string, {}] {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query rain(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}
