import VariableRegistry from "../api/VariableRegistry";

// AUTOGENERATED CLASS. DO NOT MODIFY.
export abstract class RainRequest extends Array<(_:VariableRegistry) => string> {
    public static query(config:(_:RainQueryRequest) => void) {
        const request = new RainQueryRequest();
        config(request);
        return request;
    }
    public static mutation(config:(_:RainMutationRequest) => void) {
        const request = new RainMutationRequest();
        config(request);
        return request;
    }
    abstract getStatement():[string, {}];
}

export interface NameAware {
    name(): string
}

export class RainQueryRequest extends RainRequest {
    public preprocessors:Array<string> = new Array<string>();

    public insights = (identityId:string, config:(_:QueryInsights) => void) => this.push((registry) => {
        const entity = new QueryInsights(identityId);
        config(entity);
        return entity.render(registry);
    });

    public skills = (tenantId:string, config:(_:QuerySkills) => void) => this.push((registry) => {
        const entity = new QuerySkills(tenantId);
        config(entity);
        return entity.render(registry);
    });

    public getStatement = ():[string, {}] => {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query rain(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

export class QueryInsights extends Array<(_:VariableRegistry) => string> {
    private identityId:string;

    constructor(identityId:string) {
        super();
        this.identityId = identityId;
    }

    public classify = (text:string, config:(_:QueryClassify) => void) => this.push((registry) => {
        const entity = new QueryClassify(text);
        config(entity);
        return entity.render(registry);
    });
    public gaiaQuery = (statement:string) => this.push((registry) => {
        const name1 = registry.register("statement", statement);
        return "gaiaQuery(statement:$" + name1 + ")";
    });

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("identityId", this.identityId);
        return "insights(identityId:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class QueryClassify extends Array<(_:VariableRegistry) => string> {
    private text:string;

    constructor(text:string) {
        super();
        this.text = text;
    }

    public qualifier = () => this.push(() => "qualifier");
    public reference = () => this.push(() => "reference");
    public score = () => this.push(() => "score");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("text", this.text);
        return "classify(text:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class QuerySkills extends Array<(_:VariableRegistry) => string> {
    private tenantId:string;

    constructor(tenantId:string) {
        super();
        this.tenantId = tenantId;
    }

    public status = (skillName:string, config:(_:QueryStatus) => void) => this.push((registry) => {
        const entity = new QueryStatus(skillName);
        config(entity);
        return entity.render(registry);
    });

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("tenantId", this.tenantId);
        return "skills(tenantId:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class QueryStatus extends Array<(_:VariableRegistry) => string> {
    private skillName:string;

    constructor(skillName:string) {
        super();
        this.skillName = skillName;
    }

    public name = () => this.push(() => "name");
    public status = () => this.push(() => "status");
    public created = () => this.push(() => "created");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("skillName", this.skillName);
        return "status(skillName:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class RainMutationRequest extends RainRequest {
    public preprocessors:Array<string> = new Array<string>();

    public handleReception = (impulse:ReceptionImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "handleReception(impulse:$" + name1 + ")";
    });
    public handleUtterance = (impulse:UtteranceImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "handleUtterance(impulse:$" + name1 + ")";
    });
    public handleSuggestion = (impulse:SuggestionImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "handleSuggestion(impulse:$" + name1 + ")";
    });
    public handleButton = (impulse:ButtonImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "handleButton(impulse:$" + name1 + ")";
    });
    public handleSubmit = (impulse:SubmitImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "handleSubmit(impulse:$" + name1 + ")";
    });
    public artifacts = (tenantId:string, config:(_:MutationArtifacts) => void) => this.push((registry) => {
        const entity = new MutationArtifacts(tenantId);
        config(entity);
        return entity.render(registry);
    });

    public getStatement = ():[string, {}] => {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `mutation rain(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

export class MutationArtifacts extends Array<(_:VariableRegistry) => string> {
    private tenantId:string;

    constructor(tenantId:string) {
        super();
        this.tenantId = tenantId;
    }

    public initiateUpload = (impulse:InitiateUploadImpulse, config:(_:MutationInitiateUpload) => void) => this.push((registry) => {
        const entity = new MutationInitiateUpload(impulse);
        config(entity);
        return entity.render(registry);
    });
    public transferChunk = (impulse:TransferChunkImpulse, config:(_:MutationTransferChunk) => void) => this.push((registry) => {
        const entity = new MutationTransferChunk(impulse);
        config(entity);
        return entity.render(registry);
    });
    public completeUpload = (impulse:CompleteUploadImpulse, artifact:HazeArtifact, config:(_:MutationCompleteUpload) => void) => this.push((registry) => {
        const entity = new MutationCompleteUpload(impulse, artifact);
        config(entity);
        return entity.render(registry);
    });
    public abortUpload = (impulse:AbortUploadImpulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "abortUpload(impulse:$" + name1 + ")";
    });

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("tenantId", this.tenantId);
        return "artifacts(tenantId:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class MutationInitiateUpload extends Array<(_:VariableRegistry) => string> {
    private impulse:InitiateUploadImpulse;

    constructor(impulse:InitiateUploadImpulse) {
        super();
        this.impulse = impulse;
    }

    public transportId = () => this.push(() => "transportId");
    public key = () => this.push(() => "key");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("impulse", this.impulse);
        return "initiateUpload(impulse:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class MutationTransferChunk extends Array<(_:VariableRegistry) => string> {
    private impulse:TransferChunkImpulse;

    constructor(impulse:TransferChunkImpulse) {
        super();
        this.impulse = impulse;
    }

    public transportId = () => this.push(() => "transportId");
    public key = () => this.push(() => "key");
    public partNumber = () => this.push(() => "partNumber");
    public etag = () => this.push(() => "etag");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("impulse", this.impulse);
        return "transferChunk(impulse:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class MutationCompleteUpload extends Array<(_:VariableRegistry) => string> {
    private impulse:CompleteUploadImpulse;
    private artifact:HazeArtifact;

    constructor(impulse:CompleteUploadImpulse, artifact:HazeArtifact) {
        super();
        this.impulse = impulse;
        this.artifact = artifact;
    }

    public location = () => this.push(() => "location");
    public key = () => this.push(() => "key");
    public etag = () => this.push(() => "etag");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("impulse", this.impulse);
        const name2 = registry.register("artifact", this.artifact);
        return "completeUpload(impulse:$" + name1 + ", artifact:$" + name2 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class ReceptionImpulse implements NameAware {
    identityId?: string;
    clientId?: string;
    userId?: string;
    attributes?: Map<String, any>;
      public name(): string {
          return 'ReceptionImpulse';
      }
}
export class ButtonImpulse implements NameAware {
    identityId?: string;
    clientId?: string;
    userId?: string;
    attributes?: Map<String, any>;
      public name(): string {
          return 'ButtonImpulse';
      }
}
export class SubmitImpulse implements NameAware {
    identityId?: string;
    clientId?: string;
    userId?: string;
    attributes?: Map<String, any>;
      public name(): string {
          return 'SubmitImpulse';
      }
}
export class SuggestionImpulse implements NameAware {
    identityId?: string;
    clientId?: string;
    userId?: string;
    attributes?: Map<String, any>;
      public name(): string {
          return 'SuggestionImpulse';
      }
}
export class UtteranceImpulse implements NameAware {
    identityId?: string;
    clientId?: string;
    userId?: string;
    payload?: string;
      public name(): string {
          return 'UtteranceImpulse';
      }
}
export class InitiateUploadImpulse implements NameAware {
    fileName?: string;
      public name(): string {
          return 'InitiateUploadImpulse';
      }
}
export class TransferChunkImpulse implements NameAware {
    key?: string;
    transportId?: string;
    partNumber?: number;
    partSize?: number;
    encodedBytes?: string;
      public name(): string {
          return 'TransferChunkImpulse';
      }
}
export class CompleteUploadImpulse implements NameAware {
    key?: string;
    transportId?: string;
    etags?: Map<String, any>[];
      public name(): string {
          return 'CompleteUploadImpulse';
      }
}
export class AbortUploadImpulse implements NameAware {
    key?: string;
    transportId?: string;
      public name(): string {
          return 'AbortUploadImpulse';
      }
}
export class HazeArtifact implements NameAware {
    qualifier?: string;
    appendent?: string;
    labelList?: string[];
    type?: string;
      public name(): string {
          return 'HazeArtifact';
      }
}
