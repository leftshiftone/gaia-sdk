import VariableRegistry from "../api/VariableRegistry";

// AUTOGENERATED CLASS. DO NOT MODIFY.
export abstract class HeimdallRequest extends Array<(_:VariableRegistry) => string> {
    public static query(config:(_:HeimdallQueryRequest) => void) {
        const request = new HeimdallQueryRequest();
        config(request);
        return request;
    }
    public static mutation(config:(_:HeimdallMutationRequest) => void) {
        const request = new HeimdallMutationRequest();
        config(request);
        return request;
    }
    abstract getStatement():[string, {}];
}

export class HeimdallQueryRequest extends HeimdallRequest {
    public preprocessors:Array<string> = new Array<string>();

    public getStatement():[string, {}] {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query heimdall(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

export class HeimdallMutationRequest extends HeimdallRequest {
    public preprocessors:Array<string> = new Array<string>();

    public dispatchImpulse = (impulse:Impulse) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "dispatchImpulse(impulse:$" + name1 + ")";
    });
    public dispatchImpulseContext = (impulse:ImpulseContext) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "dispatchImpulseContext(impulse:$" + name1 + ")";
    });
    public dispatchImpulseNotification = (impulse:ImpulseNotification) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "dispatchImpulseNotification(impulse:$" + name1 + ")";
    });
    public dispatchImpulseLog = (impulse:ImpulseLog) => this.push((registry) => {
        const name1 = registry.register("impulse", impulse);
        return "dispatchImpulseLog(impulse:$" + name1 + ")";
    });

    public getStatement():[string, {}] {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `mutation heimdall(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

export class Impulse {
    impulsePayload?: Uint8Array;
    impulseHeader?: ImpulseHeader;
}
export class ImpulseHeader {
    identityId?: string;
    clientId?: string;
    userId?: string;
}
export class ImpulseContext {
    impulseContextPayload?: Uint8Array;
    impulseContextHeader?: ImpulseContextHeader;
}
export class ImpulseContextHeader {
    identityId?: string;
    clientId?: string;
    userId?: string;
}
export class ImpulseNotification {
    impulseNotificationPayload?: Uint8Array;
    impulseNotificationHeader?: ImpulseNotificationHeader;
}
export class ImpulseNotificationHeader {
    identityId?: string;
    clientId?: string;
    userId?: string;
}
export class ImpulseLog {
    impulseLogPayload?: Uint8Array;
    impulseLogHeader?: ImpulseLogHeader;
}
export class ImpulseLogHeader {
    identityId?: string;
    clientId?: string;
    userId?: string;
}
