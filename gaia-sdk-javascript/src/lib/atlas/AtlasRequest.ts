

import VariableRegistry from "../api/VariableRegistry";

// AUTOGENERATED CLASS. DO NOT MODIFY.
export abstract class AtlasRequest extends Array<(_:VariableRegistry) => string> {
    public static query(config:(_:AtlasQueryRequest) => void) {
        const request = new AtlasQueryRequest();
        config(request);
        return request;
    }
    abstract getStatement():[string, {}];
}

export class AtlasQueryRequest extends AtlasRequest {
    public preprocessors:Array<string> = new Array<string>();

    public nlu = (text:string, merge:boolean = false, config:(_:QueryNlu) => void) => this.push((registry) => {
        const entity = new QueryNlu(text, merge);
        config(entity);
        return entity.render(registry);
    });

    public getStatement = ():[string, {}] => {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query atlas(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}

class QueryNlu extends Array<(_:VariableRegistry) => string> {
    private text:string;
    private merge:boolean;

    constructor(text:string, merge:boolean) {
        super();
        this.text = text;
        this.merge = merge;
    }

    public txt = () => this.push(() => "txt");
    public raw = () => this.push(() => "raw");
    public cls = (qualifier:string = "default") => this.push((registry) => {
        const name1 = registry.register("qualifier", qualifier);
        return "cls(qualifier:$" + name1 + ")";
    });
    public lex = (config:(_:QueryLex) => void) => this.push((registry) => {
        const entity = new QueryLex();
        config(entity);
        return entity.render(registry);
    });
    public dep = (config:(_:QueryDep) => void) => this.push((registry) => {
        const entity = new QueryDep();
        config(entity);
        return entity.render(registry);
    });
    public ner = (config:(_:QueryNer) => void) => this.push((registry) => {
        const entity = new QueryNer();
        config(entity);
        return entity.render(registry);
    });

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("text", this.text);
        const name2 = registry.register("merge", this.merge);
        return "nlu(text:$" + name1 + ", merge:$" + name2 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryLex extends Array<(_:VariableRegistry) => string> {
    public lemma = () => this.push(() => "lemma");
    public pos = () => this.push(() => "pos");
    public base = () => this.push(() => "base");
    public flexions = () => this.push(() => "flexions");
    public synonyms = () => this.push(() => "synonyms");
    public collocations = () => this.push(() => "collocations");
    public hyperonyms = () => this.push(() => "hyperonyms");
    public meronyms = () => this.push(() => "meronyms");
    public parts = () => this.push(() => "parts");
    public abbreviations = () => this.push(() => "abbreviations");
    public causations = () => this.push(() => "causations");
    public labels = () => this.push(() => "labels");

    public render = (registry:VariableRegistry): string => {
        return "lex { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryDep extends Array<(_:VariableRegistry) => string> {
    public sourcePos = () => this.push(() => "sourcePos");
    public targetPos = () => this.push(() => "targetPos");
    public sourceTag = () => this.push(() => "sourceTag");
    public targetTag = () => this.push(() => "targetTag");
    public sourceIndex = () => this.push(() => "sourceIndex");
    public targetIndex = () => this.push(() => "targetIndex");
    public sourceBase = () => this.push(() => "sourceBase");
    public targetBase = () => this.push(() => "targetBase");
    public main = () => this.push(() => "main");
    public modifier = () => this.push(() => "modifier");
    public parenthesized = () => this.push(() => "parenthesized");
    public source = () => this.push(() => "source");
    public target = () => this.push(() => "target");
    public relation = () => this.push(() => "relation");
    public rawRelation = () => this.push(() => "rawRelation");

    public render = (registry:VariableRegistry): string => {
        return "dep { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryNer extends Array<(_:VariableRegistry) => string> {
    public datetime = (config:(_:QueryDatetime) => void) => this.push((registry) => {
        const entity = new QueryDatetime();
        config(entity);
        return entity.render(registry);
    });
    public duration = (config:(_:QueryDuration) => void) => this.push((registry) => {
        const entity = new QueryDuration();
        config(entity);
        return entity.render(registry);
    });
    public location = (normalized:boolean = true, config:(_:QueryLocation) => void) => this.push((registry) => {
        const entity = new QueryLocation(normalized);
        config(entity);
        return entity.render(registry);
    });
    public organization = (config:(_:QueryOrganization) => void) => this.push((registry) => {
        const entity = new QueryOrganization();
        config(entity);
        return entity.render(registry);
    });
    public accommodation = (config:(_:QueryAccommodation) => void) => this.push((registry) => {
        const entity = new QueryAccommodation();
        config(entity);
        return entity.render(registry);
    });
    public person = (config:(_:QueryPerson) => void) => this.push((registry) => {
        const entity = new QueryPerson();
        config(entity);
        return entity.render(registry);
    });
    public price = (config:(_:QueryPrice) => void) => this.push((registry) => {
        const entity = new QueryPrice();
        config(entity);
        return entity.render(registry);
    });
    public age = (config:(_:QueryAge) => void) => this.push((registry) => {
        const entity = new QueryAge();
        config(entity);
        return entity.render(registry);
    });
    public bool = () => this.push(() => "bool");
    public email = () => this.push(() => "email");
    public url = () => this.push(() => "url");
    public custom = (qualifier:string, config:(_:QueryCustom) => void) => this.push((registry) => {
        const entity = new QueryCustom(qualifier);
        config(entity);
        return entity.render(registry);
    });

    public render = (registry:VariableRegistry): string => {
        return "ner { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryDatetime extends Array<(_:VariableRegistry) => string> {
    public date = () => this.push(() => "date");
    public date1 = () => this.push(() => "date1");
    public date2 = () => this.push(() => "date2");
    public negation = () => this.push(() => "negation");
    public fuzzy = () => this.push(() => "fuzzy");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "datetime { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryDuration extends Array<(_:VariableRegistry) => string> {
    public amount = () => this.push(() => "amount");
    public amountMin = () => this.push(() => "amountMin");
    public amountMax = () => this.push(() => "amountMax");
    public unit = () => this.push(() => "unit");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "duration { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryLocation extends Array<(_:VariableRegistry) => string> {
    private normalized:boolean;

    constructor(normalized:boolean) {
        super();
        this.normalized = normalized;
    }

    public name = () => this.push(() => "name");
    public type = () => this.push(() => "type");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("normalized", this.normalized);
        return "location(normalized:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryOrganization extends Array<(_:VariableRegistry) => string> {
    public name = () => this.push(() => "name");
    public type = () => this.push(() => "type");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "organization { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryAccommodation extends Array<(_:VariableRegistry) => string> {
    public name = () => this.push(() => "name");
    public type = () => this.push(() => "type");
    public amount = () => this.push(() => "amount");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "accommodation { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryPerson extends Array<(_:VariableRegistry) => string> {
    public name = () => this.push(() => "name");
    public isAdult = () => this.push(() => "isAdult");
    public age = () => this.push(() => "age");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "person { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryPrice extends Array<(_:VariableRegistry) => string> {
    public amount = () => this.push(() => "amount");
    public amountMin = () => this.push(() => "amountMin");
    public amountMax = () => this.push(() => "amountMax");
    public currency = () => this.push(() => "currency");
    public priceCategory = () => this.push(() => "priceCategory");
    public sensibility = () => this.push(() => "sensibility");
    public scope = () => this.push(() => "scope");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "price { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryAge extends Array<(_:VariableRegistry) => string> {
    public age = () => this.push(() => "age");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        return "age { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

class QueryCustom extends Array<(_:VariableRegistry) => string> {
    private qualifier:string;

    constructor(qualifier:string) {
        super();
        this.qualifier = qualifier;
    }

    public data = () => this.push(() => "data");
    public negation = () => this.push(() => "negation");
    public indices = () => this.push(() => "indices");

    public render = (registry:VariableRegistry): string => {
        const name1 = registry.register("qualifier", this.qualifier);
        return "custom(qualifier:$" + name1 + ") { " + this.map((e) => e(registry)).join(" ") + " }";
    }
}

export class AtlasMutationRequest extends AtlasRequest {
public preprocessors:Array<string> = new Array<string>();
    public getStatement():[string, {}] {
        const registry = new VariableRegistry();
        const fields = this.map((e) => e(registry)).join(" ");
        const statement = `query atlas(${registry.getDatatypes().join(", ")}) { ${fields} }`;
        return [statement, registry.getVariables()]
    }
}
